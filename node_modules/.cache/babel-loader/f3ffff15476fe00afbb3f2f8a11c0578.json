{"ast":null,"code":"// import firebase from \"firebase\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\"; // Add the Firebase products that you want to use\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst auth = getAuth();\n\nclass FirebaseAuthBackend {\n  constructor(firebaseConfig) {\n    this.registerUser = (email, password) => {\n      return new Promise((resolve, reject) => {\n        auth().createUserWithEmailAndPassword(email, password).then(user => {\n          resolve(auth().currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.loginUser = (email, password) => {\n      return new Promise((resolve, reject) => {\n        auth().signInWithEmailAndPassword(email, password).then(user => {\n          resolve(auth().currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.forgetPassword = email => {\n      return new Promise((resolve, reject) => {\n        auth().sendPasswordResetEmail(email, {\n          url: window.location.protocol + \"//\" + window.location.host + \"/login\"\n        }).then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.logout = () => {\n      return new Promise((resolve, reject) => {\n        auth().signOut().then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.setLoggeedInUser = user => {\n      localStorage.setItem(\"authUser\", JSON.stringify(user));\n    };\n\n    this.getAuthenticatedUser = () => {\n      if (!localStorage.getItem(\"authUser\")) return null;\n      return JSON.parse(localStorage.getItem(\"authUser\"));\n    };\n\n    if (firebaseConfig) {\n      // Initialize Firebase\n      initializeApp(firebaseConfig);\n      auth().onAuthStateChanged(user => {\n        if (user) {\n          localStorage.setItem(\"authUser\", JSON.stringify(user));\n        } else {\n          localStorage.removeItem(\"authUser\");\n        }\n      });\n    }\n  }\n  /**\r\n   * Registers the user with given details\r\n   */\n\n\n  /**\r\n   * Handle the error\r\n   * @param {*} error\r\n   */\n  _handleError(error) {\n    // var errorCode = error.code;\n    var errorMessage = error.message;\n    return errorMessage;\n  }\n\n}\n\nlet _fireBaseBackend = null;\n/**\r\n * Initilize the backend\r\n * @param {*} config\r\n */\n\nconst initFirebaseBackend = config => {\n  if (!_fireBaseBackend) {\n    _fireBaseBackend = new FirebaseAuthBackend(config);\n  }\n\n  return _fireBaseBackend;\n};\n/**\r\n * Returns the firebase backend\r\n */\n\n\nconst getFirebaseBackend = () => {\n  return _fireBaseBackend;\n};\n\nexport { initFirebaseBackend, getFirebaseBackend };","map":{"version":3,"sources":["D:/diom working project/staging/src/helpers/firebase_helper.js"],"names":["initializeApp","getAuth","auth","FirebaseAuthBackend","constructor","firebaseConfig","registerUser","email","password","Promise","resolve","reject","createUserWithEmailAndPassword","then","user","currentUser","error","_handleError","loginUser","signInWithEmailAndPassword","forgetPassword","sendPasswordResetEmail","url","window","location","protocol","host","catch","logout","signOut","setLoggeedInUser","localStorage","setItem","JSON","stringify","getAuthenticatedUser","getItem","parse","onAuthStateChanged","removeItem","errorMessage","message","_fireBaseBackend","initFirebaseBackend","config","getFirebaseBackend"],"mappings":"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","sourcesContent":["// import firebase from \"firebase\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\n// Add the Firebase products that you want to use\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nconst auth = getAuth();\r\nclass FirebaseAuthBackend {\r\n  constructor(firebaseConfig) {\r\n    if (firebaseConfig) {\r\n      // Initialize Firebase\r\n      initializeApp(firebaseConfig);\r\n      auth().onAuthStateChanged((user) => {\r\n        if (user) {\r\n          localStorage.setItem(\"authUser\", JSON.stringify(user));\r\n        } else {\r\n          localStorage.removeItem(\"authUser\");\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers the user with given details\r\n   */\r\n  registerUser = (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      auth()\r\n        .createUserWithEmailAndPassword(email, password)\r\n        .then(\r\n          (user) => {\r\n            resolve(auth().currentUser);\r\n          },\r\n          (error) => {\r\n            reject(this._handleError(error));\r\n          }\r\n        );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Login user with given details\r\n   */\r\n  loginUser = (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      auth()\r\n        .signInWithEmailAndPassword(email, password)\r\n        .then(\r\n          (user) => {\r\n            resolve(auth().currentUser);\r\n            \r\n          },\r\n          (error) => {\r\n            reject(this._handleError(error));\r\n          }\r\n        );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * forget Password user with given details\r\n   */\r\n  forgetPassword = (email) => {\r\n    return new Promise((resolve, reject) => {\r\n      auth()\r\n        .sendPasswordResetEmail(email, {\r\n          url:\r\n            window.location.protocol + \"//\" + window.location.host + \"/login\",\r\n        })\r\n        .then(() => {\r\n          resolve(true);\r\n        })\r\n        .catch((error) => {\r\n          reject(this._handleError(error));\r\n        });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Logout the user\r\n   */\r\n  logout = () => {\r\n    return new Promise((resolve, reject) => {\r\n      auth()\r\n        .signOut()\r\n        .then(() => {\r\n          resolve(true);\r\n        })\r\n        .catch((error) => {\r\n          reject(this._handleError(error));\r\n        });\r\n    });\r\n  };\r\n\r\n  setLoggeedInUser = (user) => {\r\n    localStorage.setItem(\"authUser\", JSON.stringify(user));\r\n  };\r\n\r\n  /**\r\n   * Returns the authenticated user\r\n   */\r\n  getAuthenticatedUser = () => {\r\n    if (!localStorage.getItem(\"authUser\")) return null;\r\n    return JSON.parse(localStorage.getItem(\"authUser\"));\r\n  };\r\n\r\n  /**\r\n   * Handle the error\r\n   * @param {*} error\r\n   */\r\n  _handleError(error) {\r\n    // var errorCode = error.code;\r\n    var errorMessage = error.message;\r\n    return errorMessage;\r\n  }\r\n}\r\n\r\nlet _fireBaseBackend = null;\r\n\r\n/**\r\n * Initilize the backend\r\n * @param {*} config\r\n */\r\nconst initFirebaseBackend = (config) => {\r\n  if (!_fireBaseBackend) {\r\n    _fireBaseBackend = new FirebaseAuthBackend(config);\r\n  }\r\n  return _fireBaseBackend;\r\n};\r\n\r\n/**\r\n * Returns the firebase backend\r\n */\r\nconst getFirebaseBackend = () => {\r\n  return _fireBaseBackend;\r\n};\r\n\r\nexport { initFirebaseBackend, getFirebaseBackend };\r\n"]},"metadata":{},"sourceType":"module"}