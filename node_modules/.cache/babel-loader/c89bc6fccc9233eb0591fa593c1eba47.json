{"ast":null,"code":"import { DIOM_BASED_URLS } from \"../config/url\";\nimport moment from \"moment\";\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of all userProfile in DIOM\r\n */\n\nexport const getuserprofile = async function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  let page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  const res = await fetch(`${DIOM_BASED_URLS}/users?size=${size}&page=${page}`, {\n    method: \"GET\",\n    redirect: \"follow\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  });\n\n  if (!res.ok) {\n    const resJson = await res.json();\n    throw new Error(resJson.error.message);\n  }\n\n  const resJson = await res.json();\n  const userProfileData = resJson.users.map((element, index) => ({ ...element,\n    id: index + 1,\n    _id: element.id,\n    userName: element.fullName,\n    email: element.email,\n    MobilePhone: element.MobilePhone,\n    checkInTime: moment(element.checkInTime).format(\"YYYY-MM-DD \")\n  }));\n  return {\n    data: userProfileData,\n    total: resJson.total,\n    hasNextPage: resJson.hasNextPage,\n    hasPreviousPage: resJson.hasPreviousPage\n  };\n};\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of one user in DIOM\r\n */\n\nexport const getuserdetails = async function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  let page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let id = arguments.length > 3 ? arguments[3] : undefined;\n  const res = await fetch(`${DIOM_BASED_URLS}/users/${id}?size=${size}&page=${page}`, {\n    method: \"GET\",\n    redirect: \"follow\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  });\n\n  if (!res.ok) {\n    const resJson = await res.json();\n    throw new Error(resJson.error.message);\n  }\n\n  const resJson = await res.json();\n  const userdetailsData = resJson;\n  return {\n    data: userdetailsData,\n    total: resJson.total,\n    hasNextPage: resJson.hasNextPage,\n    hasPreviousPage: resJson.hasPreviousPage\n  };\n};\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of user active bookings in DIOM\r\n */\n\nexport const getUseractivebookings = async function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  let page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let id = arguments.length > 3 ? arguments[3] : undefined;\n  const res = await fetch(`${DIOM_BASED_URLS}/admin-diom-bookings/${id}/active?size=${size}&page=${page}`, {\n    method: \"GET\",\n    redirect: \"follow\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  });\n\n  if (!res.ok) {\n    const resJson = await res.json();\n    throw new Error(resJson.error.message);\n  }\n\n  const resJson = await res.json(); // const userActivebookingsData = resJson.bookings.map((booking, index) => ({\n\n  const userActivebookingsData = resJson.data.map((booking, index) => ({ ...booking,\n    id: index + 1,\n    createdAt: moment(booking.createdAt).format(\"YYYY-MM-DD HH:mm\"),\n    _id: booking.id\n  }));\n  return {\n    data: userActivebookingsData,\n    total: resJson.total,\n    hasNextPage: resJson.hasNextPage,\n    hasPreviousPage: resJson.hasPreviousPage\n  };\n};\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of user past bookings in DIOM\r\n */\n\nexport const getUserPastBookings = async function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  let page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let id = arguments.length > 3 ? arguments[3] : undefined;\n  const res = await fetch(`${DIOM_BASED_URLS}/bookings/users/${id}/history?size=${size}&page=${page}`, {\n    method: \"GET\",\n    redirect: \"follow\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  });\n\n  if (!res.ok) {\n    const resJson = await res.json();\n    throw new Error(resJson.error.message);\n  }\n\n  const resJson = await res.json(); // const userPastBookingsData = resJson.bookings.map((booking, index) => ({\n\n  const userPastBookingsData = resJson.data.map((booking, index) => ({ ...booking,\n    id: index + 1,\n    createdAt: moment(booking.createdAt).format(\"YYYY-MM-DD HH:mm\"),\n    _id: booking.id\n  }));\n  return {\n    data: userPastBookingsData,\n    total: resJson.total,\n    hasNextPage: resJson.hasNextPage,\n    hasPreviousPage: resJson.hasPreviousPage\n  };\n};\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of one user in DIOM\r\n */\n\nexport const getUserScheduledBookings = async function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  let page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let id = arguments.length > 3 ? arguments[3] : undefined;\n  const res = await fetch(`${DIOM_BASED_URLS}/bookings/users/${id}/scheduled?size=${size}&page=${page}`, {\n    method: \"GET\",\n    redirect: \"follow\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  });\n\n  if (!res.ok) {\n    const resJson = await res.json();\n    throw new Error(resJson.error.message);\n  }\n\n  const resJson = await res.json();\n  const userScheduledBookingsData = resJson.bookings.map((booking, index) => ({ ...booking,\n    id: index + 1,\n    createdAt: moment(booking.createdAt).format(\"YYYY-MM-DD HH:mm\"),\n    _id: booking.id\n  }));\n  return {\n    data: userScheduledBookingsData,\n    total: resJson.total,\n    hasNextPage: resJson.hasNextPage,\n    hasPreviousPage: resJson.hasPreviousPage\n  };\n};\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of one user in DIOM\r\n */\n\nexport const getUserByProfession = async function () {\n  let token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  const res = await fetch(`${DIOM_BASED_URLS}/general/users/professions`, {\n    method: \"GET\",\n    redirect: \"follow\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  });\n\n  if (!res.ok) {\n    const resJson = await res.json();\n    throw new Error(resJson.error.message);\n  }\n\n  const resJson = await res.json();\n  return {\n    resJson\n  };\n};","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/1diom-frontend/diom-frontend/src/APIS/userProfle.js"],"names":["DIOM_BASED_URLS","moment","getuserprofile","size","page","token","res","fetch","method","redirect","headers","Authorization","ok","resJson","json","Error","error","message","userProfileData","users","map","element","index","id","_id","userName","fullName","email","MobilePhone","checkInTime","format","data","total","hasNextPage","hasPreviousPage","getuserdetails","userdetailsData","getUseractivebookings","userActivebookingsData","booking","createdAt","getUserPastBookings","userPastBookingsData","getUserScheduledBookings","userScheduledBookingsData","bookings","getUserByProfession"],"mappings":"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","sourcesContent":["import { DIOM_BASED_URLS } from \"../config/url\";\r\nimport moment from \"moment\";\r\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of all userProfile in DIOM\r\n */\r\n\r\nexport const getuserprofile = async (size = 30, page = 1, token = \"\") => {\r\n  const res = await fetch(\r\n    `${DIOM_BASED_URLS}/users?size=${size}&page=${page}`,\r\n\r\n    {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    }\r\n  );\r\n  if (!res.ok) {\r\n    const resJson = await res.json();\r\n    throw new Error(resJson.error.message);\r\n  }\r\n  const resJson = await res.json();\r\n  const userProfileData = resJson.users.map((element, index) => ({\r\n    ...element,\r\n    id: index + 1,\r\n    _id: element.id,\r\n    userName: element.fullName,\r\n    email: element.email,\r\n    MobilePhone: element.MobilePhone,\r\n    checkInTime: moment(element.checkInTime).format(\"YYYY-MM-DD \"),\r\n  }));\r\n  return {\r\n    data: userProfileData,\r\n    total: resJson.total,\r\n    hasNextPage: resJson.hasNextPage,\r\n    hasPreviousPage: resJson.hasPreviousPage,\r\n  };\r\n};\r\n\r\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of one user in DIOM\r\n */\r\n\r\nexport const getuserdetails = async (size = 30, page = 1, token = \"\", id) => {\r\n  const res = await fetch(\r\n    `${DIOM_BASED_URLS}/users/${id}?size=${size}&page=${page}`,\r\n\r\n    {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    }\r\n  );\r\n  if (!res.ok) {\r\n    const resJson = await res.json();\r\n    throw new Error(resJson.error.message);\r\n  }\r\n  const resJson = await res.json();\r\n  const userdetailsData = resJson;\r\n\r\n  return {\r\n    data: userdetailsData,\r\n    total: resJson.total,\r\n    hasNextPage: resJson.hasNextPage,\r\n    hasPreviousPage: resJson.hasPreviousPage,\r\n  };\r\n};\r\n\r\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of user active bookings in DIOM\r\n */\r\n\r\nexport const getUseractivebookings = async (\r\n  size = 30,\r\n  page = 1,\r\n  token = \"\",\r\n  id\r\n) => {\r\n  const res = await fetch(\r\n    `${DIOM_BASED_URLS}/admin-diom-bookings/${id}/active?size=${size}&page=${page}`,\r\n\r\n    {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    }\r\n  );\r\n  if (!res.ok) {\r\n    const resJson = await res.json();\r\n    throw new Error(resJson.error.message);\r\n  }\r\n  const resJson = await res.json();\r\n  // const userActivebookingsData = resJson.bookings.map((booking, index) => ({\r\n  const userActivebookingsData = resJson.data.map((booking, index) => ({\r\n    ...booking,\r\n    id: index + 1,\r\n    createdAt: moment(booking.createdAt).format(\"YYYY-MM-DD HH:mm\"),\r\n    _id: booking.id,\r\n  }));\r\n\r\n  return {\r\n    data: userActivebookingsData,\r\n    total: resJson.total,\r\n    hasNextPage: resJson.hasNextPage,\r\n    hasPreviousPage: resJson.hasPreviousPage,\r\n  };\r\n};\r\n\r\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of user past bookings in DIOM\r\n */\r\nexport const getUserPastBookings = async (\r\n  size = 30,\r\n  page = 1,\r\n  token = \"\",\r\n  id\r\n) => {\r\n  const res = await fetch(\r\n    `${DIOM_BASED_URLS}/bookings/users/${id}/history?size=${size}&page=${page}`,\r\n\r\n    {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    }\r\n  );\r\n  if (!res.ok) {\r\n    const resJson = await res.json();\r\n    throw new Error(resJson.error.message);\r\n  }\r\n\r\n  const resJson = await res.json();\r\n\r\n  // const userPastBookingsData = resJson.bookings.map((booking, index) => ({\r\n  const userPastBookingsData = resJson.data.map((booking, index) => ({\r\n    ...booking,\r\n    id: index + 1,\r\n    createdAt: moment(booking.createdAt).format(\"YYYY-MM-DD HH:mm\"),\r\n    _id: booking.id,\r\n  }));\r\n\r\n  return {\r\n    data: userPastBookingsData,\r\n    total: resJson.total,\r\n    hasNextPage: resJson.hasNextPage,\r\n    hasPreviousPage: resJson.hasPreviousPage,\r\n  };\r\n};\r\n\r\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of one user in DIOM\r\n */\r\n\r\nexport const getUserScheduledBookings = async (\r\n  size = 30,\r\n  page = 1,\r\n  token = \"\",\r\n  id\r\n) => {\r\n  const res = await fetch(\r\n    `${DIOM_BASED_URLS}/bookings/users/${id}/scheduled?size=${size}&page=${page}`,\r\n\r\n    {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    }\r\n  );\r\n  if (!res.ok) {\r\n    const resJson = await res.json();\r\n    throw new Error(resJson.error.message);\r\n  }\r\n  const resJson = await res.json();\r\n\r\n  const userScheduledBookingsData = resJson.bookings.map((booking, index) => ({\r\n    ...booking,\r\n    id: index + 1,\r\n    createdAt: moment(booking.createdAt).format(\"YYYY-MM-DD HH:mm\"),\r\n    _id: booking.id,\r\n  }));\r\n\r\n  return {\r\n    data: userScheduledBookingsData,\r\n    total: resJson.total,\r\n    hasNextPage: resJson.hasNextPage,\r\n    hasPreviousPage: resJson.hasPreviousPage,\r\n  };\r\n};\r\n\r\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of one user in DIOM\r\n */\r\n\r\nexport const getUserByProfession = async (token = \"\") => {\r\n  const res = await fetch(`${DIOM_BASED_URLS}/general/users/professions`, {\r\n    method: \"GET\",\r\n    redirect: \"follow\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n    },\r\n  });\r\n  if (!res.ok) {\r\n    const resJson = await res.json();\r\n    throw new Error(resJson.error.message);\r\n  }\r\n  const resJson = await res.json();\r\n  return { resJson };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}