{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSnackbar } from \"notistack\";\nimport { usePaginatedQuery } from '../../../hooks/query';\nimport { getNewreports, getPastreports } from '../../../APIS/reports';\nimport { QueryClient } from 'react-query';\n\nconst useReportRequest = () => {\n  _s();\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const token = localStorage.getItem(\"Token\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedReportType, setSelectedReportType] = useState(\"USER_REPORTS\");\n  const reportTypeOptions = [{\n    label: \"Booking Report\",\n    value: \"BOOKING_REPORTS\"\n  }, {\n    label: \"User Report\",\n    value: \"USER_REPORTS\"\n  }, {\n    label: \"User Ananlysis Report\",\n    value: \"USER_ANALYSIS_REPORTS\"\n  }, {\n    label: \"Cancelled Bookings\",\n    value: \"CANCELLED_BOOKINGS_REPORTS\"\n  }];\n\n  const retryFunc = () => {\n    // alert(\" i am retry presses\")\n    const message = 'Gathering Report Data';\n    enqueueSnackbar(message, {\n      variant: 'success'\n    }); // const message1 = 'Exporting Report ';\n    //   enqueueSnackbar(message1, { \n    //     variant: 'success', \n    // });\n  };\n\n  const downloadFunc = () => {\n    const message1 = 'Your Report has started  to download';\n    enqueueSnackbar(message1, {\n      variant: 'success'\n    });\n  }; // *************\n\n\n  const {\n    data: {\n      data: pastReportsDataa,\n      hasNextPage,\n      hasPreviousPage,\n      total,\n      refetch: pastReportsRefteh\n    },\n    isLoading\n  } = usePaginatedQuery([\"pastReprtssData\", selectedReportType], () => getPastreports(token, selectedReportType));\n\n  const reportTyperequestFunc = e => {\n    setSelectedReportType(e.value);\n  }; // const pastReportsDataa = pastReportsData.data;\n  // console.log(\"past reports : \",pastReportsData)\n  // *************\n  // *************\n\n\n  const {\n    data: {\n      data: newReportsDataa\n    }\n  } = usePaginatedQuery([\"newReportssData\", currentPage], () => getNewreports(token)); // const newReportsDataa = newReportsData.data;\n  // console.log(\"New reports : \",newReportsDataa)\n  // *************\n\n  useEffect( // FOR PRE-FETCHING NEXT PAGE\n  async () => {\n    await getPastreports(token, selectedReportType); //  pastReportsRefteh;\n\n    QueryClient.invalidateQueries(\"pastReprtssData\");\n  }, [selectedReportType]);\n  return {\n    reportTypeOptions,\n    retryFunc,\n    downloadFunc,\n    pastReportsDataa,\n    newReportsDataa,\n    isLoading,\n    reportTyperequestFunc\n  };\n};\n\n_s(useReportRequest, \"nFCAV3BEsYHpjSfu7Fcxe8VnyO8=\", false, function () {\n  return [useSnackbar, usePaginatedQuery, usePaginatedQuery];\n});\n\nexport default useReportRequest;","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/diom(3)/src/pages/Reports/generateodf/useReportRequest.js"],"names":["React","useState","useEffect","useSnackbar","usePaginatedQuery","getNewreports","getPastreports","QueryClient","useReportRequest","enqueueSnackbar","token","localStorage","getItem","currentPage","setCurrentPage","selectedReportType","setSelectedReportType","reportTypeOptions","label","value","retryFunc","message","variant","downloadFunc","message1","data","pastReportsDataa","hasNextPage","hasPreviousPage","total","refetch","pastReportsRefteh","isLoading","reportTyperequestFunc","e","newReportsDataa","invalidateQueries"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport {  useSnackbar } from \"notistack\";\r\nimport { usePaginatedQuery } from '../../../hooks/query';\r\nimport { getNewreports, getPastreports } from '../../../APIS/reports';\r\nimport { QueryClient } from 'react-query';\r\n\r\nconst useReportRequest = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const token = localStorage.getItem(\"Token\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const[selectedReportType,setSelectedReportType]=useState(\"USER_REPORTS\")\r\n    const reportTypeOptions = [\r\n      { label: \"Booking Report\", value: \"BOOKING_REPORTS\" },\r\n      { label: \"User Report\", value: \"USER_REPORTS\" },\r\n      { label: \"User Ananlysis Report\", value: \"USER_ANALYSIS_REPORTS\" },\r\n      { label: \"Cancelled Bookings\", value: \"CANCELLED_BOOKINGS_REPORTS\" },\r\n      ];\r\n\r\n      const retryFunc=()=>{\r\n        // alert(\" i am retry presses\")\r\n        const message = 'Gathering Report Data';\r\n        enqueueSnackbar(message, { \r\n          variant: 'success', \r\n      });\r\n      // const message1 = 'Exporting Report ';\r\n      //   enqueueSnackbar(message1, { \r\n      //     variant: 'success', \r\n      // });\r\n      }\r\n      const downloadFunc=()=>{\r\n        const message1 = 'Your Report has started  to download';\r\n        enqueueSnackbar(message1, { \r\n          variant: 'success', \r\n      });\r\n      }\r\n\r\n\r\n      \r\n  \r\n\r\n\r\n      \r\n// *************\r\n\r\nconst {\r\n  data: { data: pastReportsDataa, hasNextPage, hasPreviousPage, total,refetch:pastReportsRefteh },\r\n  isLoading,\r\n} = usePaginatedQuery(\r\n  [\"pastReprtssData\",selectedReportType],\r\n  () =>\r\n  getPastreports(token,selectedReportType)\r\n);\r\nconst reportTyperequestFunc = (e)=>{\r\n  \r\n  setSelectedReportType(e.value);\r\n  \r\n}\r\n\r\n// const pastReportsDataa = pastReportsData.data;\r\n// console.log(\"past reports : \",pastReportsData)\r\n\r\n// *************\r\n// *************\r\nconst {\r\n  data: { data: newReportsDataa},\r\n  \r\n} = usePaginatedQuery(\r\n  [\"newReportssData\",currentPage],\r\n  () =>\r\n  getNewreports(token)\r\n);\r\n\r\n// const newReportsDataa = newReportsData.data;\r\n// console.log(\"New reports : \",newReportsDataa)\r\n\r\n// *************\r\nuseEffect(\r\n  // FOR PRE-FETCHING NEXT PAGE\r\n  async () => {\r\n     await getPastreports(token,selectedReportType);\r\n    //  pastReportsRefteh;\r\n        QueryClient.invalidateQueries(\"pastReprtssData\");\r\n  },\r\n  [selectedReportType]\r\n);\r\n\r\n  return (\r\n    {\r\n        reportTypeOptions,\r\n        retryFunc,\r\n        downloadFunc,\r\n        pastReportsDataa,\r\n        newReportsDataa,\r\n        isLoading,\r\n        reportTyperequestFunc\r\n    }\r\n  )\r\n}\r\n\r\nexport default useReportRequest"]},"metadata":{},"sourceType":"module"}