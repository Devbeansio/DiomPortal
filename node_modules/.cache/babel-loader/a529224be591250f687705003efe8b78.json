{"ast":null,"code":"import { DIOM_BASED_URLS } from \"../config/url\";\nimport moment from \"moment\";\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of all resource in DIOM\r\n */\n\nexport const getFloorplans = async function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  let page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  const res = await fetch(`${DIOM_BASED_URLS}/admin-business-locations?filter={\"where\":{\"visibility\":true}}`, {\n    method: \"GET\",\n    redirect: \"follow\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  });\n\n  if (!res.ok) {\n    const resJson = await res.json();\n    throw new Error(resJson.error.message);\n  }\n\n  const resJson = await res.json();\n  const floorPlansData = resJson.map((e, index) => ({ ...e,\n    name: e.Name,\n    id: index + 1,\n    floorid: e.id\n  }));\n  return {\n    data: floorPlansData,\n    total: resJson.total,\n    hasNextPage: resJson.hasNextPage,\n    hasPreviousPage: resJson.hasPreviousPage\n  };\n};\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a floor plan names in DIOM\r\n */\n\nexport const getFloorPlansNames = async function () {\n  let token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let floorid = arguments.length > 1 ? arguments[1] : undefined;\n  return await (await await fetch(`${DIOM_BASED_URLS}/admin-business-locations/${floorid}`, {\n    method: \"GET\",\n    redirect: \"follow\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  })).json();\n};","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/diom(3)/src/APIS/floorplans.js"],"names":["DIOM_BASED_URLS","moment","getFloorplans","size","page","token","res","fetch","method","redirect","headers","Authorization","ok","resJson","json","Error","error","message","floorPlansData","map","e","index","name","Name","id","floorid","data","total","hasNextPage","hasPreviousPage","getFloorPlansNames"],"mappings":"AAAA,SAASA,eAAT,QAAgC,eAAhC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAG,kBAA2C;AAAA,MAApCC,IAAoC,uEAA7B,EAA6B;AAAA,MAAzBC,IAAyB,uEAAlB,CAAkB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AACtE,QAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,GAAEP,eAAgB,gEADE,EAGrB;AACEQ,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,QAAQ,EAAE,QAFZ;AAGEC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,YAAYN;AADpB;AAHX,GAHqB,CAAvB;;AAWA,MAAI,CAACC,GAAG,CAACM,EAAT,EAAa;AACX,UAAMC,OAAO,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAtB;AACA,UAAM,IAAIC,KAAJ,CAAUF,OAAO,CAACG,KAAR,CAAcC,OAAxB,CAAN;AACD;;AACD,QAAMJ,OAAO,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAtB;AAEA,QAAMI,cAAc,GAAGL,OAAO,CAACM,GAAR,CAAY,CAACC,CAAD,EAAIC,KAAJ,MAAe,EAChD,GAAGD,CAD6C;AAEhDE,IAAAA,IAAI,EAAEF,CAAC,CAACG,IAFwC;AAGhDC,IAAAA,EAAE,EAAEH,KAAK,GAAG,CAHoC;AAIhDI,IAAAA,OAAO,EAAEL,CAAC,CAACI;AAJqC,GAAf,CAAZ,CAAvB;AAOA,SAAO;AACLE,IAAAA,IAAI,EAAER,cADD;AAELS,IAAAA,KAAK,EAAEd,OAAO,CAACc,KAFV;AAGLC,IAAAA,WAAW,EAAEf,OAAO,CAACe,WAHhB;AAILC,IAAAA,eAAe,EAAEhB,OAAO,CAACgB;AAJpB,GAAP;AAMD,CA/BM;AAiCP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,kBAAkB,GAAG,kBAA+B;AAAA,MAAxBzB,KAAwB,uEAAhB,EAAgB;AAAA,MAAZoB,OAAY;AAC/D,SAAO,MAAM,CACX,MAAM,MAAMlB,KAAK,CACd,GAAEP,eAAgB,6BAA4ByB,OAAQ,EADxC,EAEf;AACEjB,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,QAAQ,EAAE,QAFZ;AAGEC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,YAAYN;AADpB;AAHX,GAFe,CADN,EAWXS,IAXW,EAAb;AAYD,CAbM","sourcesContent":["import { DIOM_BASED_URLS } from \"../config/url\";\r\nimport moment from \"moment\";\r\n\r\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a list of all resource in DIOM\r\n */\r\n\r\nexport const getFloorplans = async (size = 30, page = 1, token = \"\") => {\r\n  const res = await fetch(\r\n    `${DIOM_BASED_URLS}/admin-business-locations?filter={\"where\":{\"visibility\":true}}`,\r\n\r\n    {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    }\r\n  );\r\n  if (!res.ok) {\r\n    const resJson = await res.json();\r\n    throw new Error(resJson.error.message);\r\n  }\r\n  const resJson = await res.json();\r\n\r\n  const floorPlansData = resJson.map((e, index) => ({\r\n    ...e,\r\n    name: e.Name,\r\n    id: index + 1,\r\n    floorid: e.id,\r\n  }));\r\n\r\n  return {\r\n    data: floorPlansData,\r\n    total: resJson.total,\r\n    hasNextPage: resJson.hasNextPage,\r\n    hasPreviousPage: resJson.hasPreviousPage,\r\n  };\r\n};\r\n\r\n/**\r\n *\r\n * @param size\r\n * @param page\r\n * @param {JWT} token\r\n * @returns a floor plan names in DIOM\r\n */\r\n\r\nexport const getFloorPlansNames = async (token = \"\", floorid) => {\r\n  return await (\r\n    await await fetch(\r\n      `${DIOM_BASED_URLS}/admin-business-locations/${floorid}`,\r\n      {\r\n        method: \"GET\",\r\n        redirect: \"follow\",\r\n        headers: {\r\n          Authorization: \"Bearer \" + token,\r\n        },\r\n      }\r\n    )\r\n  ).json();\r\n};\r\n"]},"metadata":{},"sourceType":"module"}