{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport { usePaginatedQuery } from \"../../hooks/query\";\nimport { getNewreports, getPastreports } from \"../../APIS/reports\";\nimport { QueryClient, useQueryClient } from \"react-query\";\nimport { DIOM_BASED_URLS } from \"../../config/url\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useReportRequest = () => {\n  _s();\n\n  let history = useHistory();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const token = localStorage.getItem(\"Token\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [isOpen, setIsOpen] = useState(false);\n  const [newOldReportsData, setNewOldReportsData] = useState([]);\n  const [postFilter, setPostFilter] = useState(false);\n  const [selectedReportType, setSelectedReportType] = useState(\"\");\n  const [activeTabJustify, setActiveTabJustify] = useState(\"1\");\n  const QueryClient = useQueryClient();\n\n  const changeCurrentPage = pageNum => {\n    setCurrentPage(pageNum); // QueryClient.invalidateQueries(\"newReportssData\");\n  };\n\n  const reportTypeOptions = [{\n    label: \"Booking Report\",\n    value: \"BOOKING_REPORTS\"\n  }, {\n    label: \"User Report\",\n    value: \"USER_REPORTS\"\n  }, {\n    label: \"User Ananlysis Report\",\n    value: \"USER_ANALYSIS_REPORTS\"\n  }, {\n    label: \"Cancelled Bookings\",\n    value: \"CANCELLED_BOOKINGS_REPORTS\"\n  }];\n\n  const retryFunc = () => {\n    const message = \"Gathering Report Data\";\n    enqueueSnackbar(message, {\n      variant: \"success\"\n    });\n  };\n\n  const pagelengthnum = e => {\n    if (e.target.value === \"1\") {\n      setPageSize(10); // QueryClient.invalidateQueries(\"newReportssData\");\n    } else if (e.target.value === \"2\") {\n      setPageSize(30); // QueryClient.invalidateQueries(\"newReportssData\");\n    } else if (e.target.value === \"3\") {\n      setPageSize(50);\n    }\n  }; // useEffect(() => {\n  //   (async () => {\n  //     getPastreports(token, selectedReportType, postFilter,pageSize,currentPage);\n  //     getNewreports(token, selectedReportType, postFilter,pageSize,currentPage)\n  //     // resourceResourcetypesdata && (await getresoucresbyid());\n  //   })();\n  // }, [\n  //   pageSize,currentPage\n  // ]);\n\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const downloadFunc = rowId => {\n    const message1 = \"Your Report has started  to download\";\n    enqueueSnackbar(message1, {\n      variant: \"success\"\n    });\n    fetch(`${DIOM_BASED_URLS}/reports/commands`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json, text/plain\",\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n        Authorization: \"Bearer \" + token\n      },\n      body: JSON.stringify({\n        id: `${rowId}`,\n        command: \"MARK_READ\"\n      })\n    }).then(result3 => {}).catch(error => toast.error(\" Something went wrong\"));\n  };\n\n  const reportTyperequestFunc = e => {\n    setPostFilter(true);\n    setSelectedReportType(e.value);\n  }; // *************\n\n\n  const {\n    data: {\n      data: pastReportsDataa,\n      hasNextPage: pastHasNextPage,\n      hasPreviousPage: pastHasPreviousPage,\n      total: pastTotal,\n      refetch: pastReportsRefteh\n    },\n    isLoading\n  } = usePaginatedQuery([\"pastReprtssData\", `${selectedReportType}, ${pageSize},${currentPage}`], () => getPastreports(token, selectedReportType, postFilter, pageSize, currentPage, history)); // *************\n  // *************\n\n  const {\n    data: {\n      data: newReportsDataa,\n      hasNextPage: newHasNextPage,\n      hasPreviousPage: newHasPreviousPage,\n      total: newTotal,\n      refetch: newReportsRefteh\n    }\n  } = usePaginatedQuery([\"newReportssData\",, `${selectedReportType},${pageSize},${currentPage}`], () => getNewreports(token, selectedReportType, postFilter, pageSize, currentPage, history));\n  const pageOptions = {\n    sizePerPage: pageSize,\n    totalSize: activeTabJustify === \"1\" ? pastTotal : activeTabJustify === \"2\" ? newTotal : pastTotal !== null && pastTotal !== void 0 ? pastTotal : 0,\n    custom: true\n  };\n  return {\n    reportTypeOptions,\n    retryFunc,\n    downloadFunc,\n    pastReportsDataa,\n    newReportsDataa,\n    newOldReportsData,\n    setNewOldReportsData,\n    isLoading,\n    reportTyperequestFunc,\n    pastHasNextPage,\n    pastTotal,\n    pastHasPreviousPage,\n    pastReportsRefteh,\n    newHasNextPage,\n    newHasPreviousPage,\n    newTotal,\n    newReportsRefteh,\n    pagelengthnum,\n    toggle,\n    isOpen,\n    pageSize,\n    currentPage,\n    changeCurrentPage,\n    pageOptions,\n    activeTabJustify,\n    setActiveTabJustify\n  };\n};\n\n_s(useReportRequest, \"IPHRDs158OUTuOytPQ94Elvrs1M=\", false, function () {\n  return [useHistory, useSnackbar, useQueryClient, usePaginatedQuery, usePaginatedQuery];\n});\n\nexport default useReportRequest;","map":{"version":3,"names":["React","useState","useEffect","useSnackbar","usePaginatedQuery","getNewreports","getPastreports","QueryClient","useQueryClient","DIOM_BASED_URLS","toast","useHistory","useReportRequest","history","enqueueSnackbar","token","localStorage","getItem","currentPage","setCurrentPage","pageSize","setPageSize","isOpen","setIsOpen","newOldReportsData","setNewOldReportsData","postFilter","setPostFilter","selectedReportType","setSelectedReportType","activeTabJustify","setActiveTabJustify","changeCurrentPage","pageNum","reportTypeOptions","label","value","retryFunc","message","variant","pagelengthnum","e","target","toggle","downloadFunc","rowId","message1","fetch","method","headers","Accept","Authorization","body","JSON","stringify","id","command","then","result3","catch","error","reportTyperequestFunc","data","pastReportsDataa","hasNextPage","pastHasNextPage","hasPreviousPage","pastHasPreviousPage","total","pastTotal","refetch","pastReportsRefteh","isLoading","newReportsDataa","newHasNextPage","newHasPreviousPage","newTotal","newReportsRefteh","pageOptions","sizePerPage","totalSize","custom"],"sources":["C:/Users/tech sign/Desktop/xyz/src/pages/Reports/useReportRequest.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { usePaginatedQuery } from \"../../hooks/query\";\r\nimport { getNewreports, getPastreports } from \"../../APIS/reports\";\r\nimport { QueryClient ,useQueryClient} from \"react-query\";\r\nimport { DIOM_BASED_URLS } from \"../../config/url\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useReportRequest = () => {\r\n  let history = useHistory();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const token = localStorage.getItem(\"Token\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(50);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [newOldReportsData, setNewOldReportsData] = useState([]);\r\n  const [postFilter, setPostFilter] = useState(false);\r\n  const [selectedReportType, setSelectedReportType] = useState(\"\");\r\n  const [activeTabJustify, setActiveTabJustify] = useState(\"1\");\r\n   const QueryClient = useQueryClient();\r\n\r\n\r\n\r\n  const changeCurrentPage = (pageNum) => {\r\n    setCurrentPage(pageNum);\r\n    // QueryClient.invalidateQueries(\"newReportssData\");\r\n  };\r\n  const reportTypeOptions = [\r\n    { label: \"Booking Report\", value: \"BOOKING_REPORTS\" },\r\n    { label: \"User Report\", value: \"USER_REPORTS\" },\r\n    { label: \"User Ananlysis Report\", value: \"USER_ANALYSIS_REPORTS\" },\r\n    { label: \"Cancelled Bookings\", value: \"CANCELLED_BOOKINGS_REPORTS\" },\r\n  ];\r\n\r\n  const retryFunc = () => {\r\n    const message = \"Gathering Report Data\";\r\n    enqueueSnackbar(message, {\r\n      variant: \"success\",\r\n    });\r\n  };\r\n\r\n \r\n\r\n  const pagelengthnum = (e) => {\r\n    \r\n    if (e.target.value === \"1\") {\r\n      setPageSize(10);\r\n      // QueryClient.invalidateQueries(\"newReportssData\");\r\n    } else if (e.target.value === \"2\") {\r\n      setPageSize(30);\r\n      // QueryClient.invalidateQueries(\"newReportssData\");\r\n    } else if (e.target.value === \"3\") {\r\n      setPageSize(50);\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   (async () => {\r\n  //     getPastreports(token, selectedReportType, postFilter,pageSize,currentPage);\r\n  //     getNewreports(token, selectedReportType, postFilter,pageSize,currentPage)\r\n\r\n     \r\n  //     // resourceResourcetypesdata && (await getresoucresbyid());\r\n  //   })();\r\n  // }, [\r\n  //   pageSize,currentPage\r\n  // ]);\r\n\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const downloadFunc = (rowId) => {\r\n    const message1 = \"Your Report has started  to download\";\r\n    enqueueSnackbar(message1, {\r\n      variant: \"success\",\r\n    });\r\n    fetch(`${DIOM_BASED_URLS}/reports/commands`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n      body: JSON.stringify({\r\n        id: `${rowId}`,\r\n        command: \"MARK_READ\",\r\n      }),\r\n    })\r\n      .then((result3) => {})\r\n      .catch((error) => toast.error(\" Something went wrong\"));\r\n  };\r\n\r\n  const reportTyperequestFunc = (e) => {\r\n    setPostFilter(true);\r\n    setSelectedReportType(e.value);\r\n  };\r\n\r\n  // *************\r\n\r\n  const {\r\n    data: {\r\n      data: pastReportsDataa,\r\n      hasNextPage: pastHasNextPage,\r\n      hasPreviousPage: pastHasPreviousPage,\r\n      total: pastTotal,\r\n      refetch: pastReportsRefteh,\r\n      \r\n    },\r\n    isLoading,\r\n  } = usePaginatedQuery([\"pastReprtssData\", `${selectedReportType}, ${pageSize},${currentPage}`], () =>\r\n    getPastreports(token, selectedReportType, postFilter,pageSize,currentPage,history)\r\n  );\r\n  // *************\r\n  // *************\r\n  const {\r\n    data: {\r\n      data: newReportsDataa,\r\n      hasNextPage: newHasNextPage,\r\n      hasPreviousPage: newHasPreviousPage,\r\n      total: newTotal,\r\n      refetch: newReportsRefteh,\r\n    },\r\n  } = usePaginatedQuery([\"newReportssData\", , `${selectedReportType},${pageSize},${currentPage}`], () =>\r\n    getNewreports(token, selectedReportType, postFilter,pageSize,currentPage,history)\r\n  );\r\n\r\n\r\n  const pageOptions = {\r\n    sizePerPage: pageSize,\r\n    totalSize: activeTabJustify ===\"1\"?pastTotal :activeTabJustify ===\"2\"?newTotal:pastTotal  ?? 0,\r\n    custom: true,\r\n  };\r\n\r\n\r\n  return {\r\n    reportTypeOptions,\r\n    retryFunc,\r\n    downloadFunc,\r\n    pastReportsDataa,\r\n    newReportsDataa,\r\n    newOldReportsData,\r\n    setNewOldReportsData,\r\n    isLoading,\r\n    reportTyperequestFunc,\r\n    pastHasNextPage,\r\n    pastTotal,\r\n    pastHasPreviousPage,\r\n    pastReportsRefteh,\r\n    newHasNextPage,\r\n    newHasPreviousPage,\r\n    newTotal,\r\n    newReportsRefteh,\r\n    pagelengthnum,\r\n    toggle,\r\n    isOpen,\r\n    pageSize,\r\n    currentPage,\r\n    changeCurrentPage,\r\n    pageOptions,\r\n    activeTabJustify, setActiveTabJustify\r\n    \r\n  };\r\n};\r\n\r\nexport default useReportRequest;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}