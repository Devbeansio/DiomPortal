{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport { useHistory } from \"react-router-dom\";\nimport { getFloorplans } from \"../../../APIS/floorplans\";\nimport { usePaginatedQuery } from \"../../../hooks/query\";\nexport const useFloorplans = () => {\n  _s();\n\n  let history = useHistory();\n  const [isOpen, setIsOpen] = useState(false);\n  const token = localStorage.getItem(\"Token\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n\n  const changeCurrentPage = pageNum => setCurrentPage(pageNum);\n\n  const queryClient = useQueryClient();\n  const {\n    data: {\n      data: floorPlansData,\n      hasNextPage,\n      hasPreviousPage,\n      total\n    },\n    isLoading\n  } = usePaginatedQuery([\"fllorplans\", currentPage], () => getFloorplans(pageSize, currentPage, token, history));\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const pagelengthnum = e => {\n    if (e.target.value === \"1\") {\n      setPageSize(10);\n    } else if (e.target.value === \"2\") {\n      setPageSize(30);\n    } else if (e.target.value === \"3\") {\n      setPageSize(50);\n    }\n  };\n\n  const pageOptions = {\n    sizePerPage: pageSize,\n    totalSize: total !== null && total !== void 0 ? total : 0,\n    custom: true\n  };\n  useEffect(() => {\n    // FOR PRE-FETCHING NEXT PAGE\n    if (hasNextPage) {\n      const nextPage = currentPage + 1;\n      queryClient.prefetchQuery([\"fllorplans\", nextPage], () => getFloorplans(pageSize, nextPage, token, history));\n    }\n  }, [currentPage, queryClient]);\n  return {\n    currentPage,\n    pageOptions,\n    floorPlansData,\n    hasNextPage,\n    hasPreviousPage,\n    total,\n    isLoading,\n    pagelengthnum,\n    pageSize,\n    toggle,\n    isOpen,\n    changeCurrentPage\n  };\n};\n\n_s(useFloorplans, \"EfK86MJWcCmW+v4v4WPjiR9LD58=\", false, function () {\n  return [useHistory, useQueryClient, usePaginatedQuery];\n});","map":{"version":3,"names":["useEffect","useState","useQueryClient","useHistory","getFloorplans","usePaginatedQuery","useFloorplans","history","isOpen","setIsOpen","token","localStorage","getItem","currentPage","setCurrentPage","pageSize","setPageSize","changeCurrentPage","pageNum","queryClient","data","floorPlansData","hasNextPage","hasPreviousPage","total","isLoading","toggle","pagelengthnum","e","target","value","pageOptions","sizePerPage","totalSize","custom","nextPage","prefetchQuery"],"sources":["C:/Users/tech sign/Desktop/xyz/src/pages/Inventories/FloorPlan/useFloorPlans.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getFloorplans } from \"../../../APIS/floorplans\";\r\nimport { usePaginatedQuery } from \"../../../hooks/query\";\r\n\r\nexport const useFloorplans = () => {\r\n  let history = useHistory();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const token = localStorage.getItem(\"Token\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(50);\r\n  const changeCurrentPage = (pageNum) => setCurrentPage(pageNum);\r\n  const queryClient = useQueryClient();\r\n\r\n  const {\r\n    data: { data: floorPlansData, hasNextPage, hasPreviousPage, total },\r\n    isLoading,\r\n  } = usePaginatedQuery([\"fllorplans\", currentPage], () =>\r\n    getFloorplans(pageSize, currentPage, token,history)\r\n  );\r\n\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n  const pagelengthnum = (e) => {\r\n    if (e.target.value === \"1\") {\r\n      setPageSize(10);\r\n    } else if (e.target.value === \"2\") {\r\n      setPageSize(30);\r\n    } else if (e.target.value === \"3\") {\r\n      setPageSize(50);\r\n    }\r\n  };\r\n\r\n  const pageOptions = {\r\n    sizePerPage: pageSize,\r\n    totalSize: total ?? 0,\r\n    custom: true,\r\n  };\r\n\r\n  useEffect(() => {\r\n    // FOR PRE-FETCHING NEXT PAGE\r\n    if (hasNextPage) {\r\n      const nextPage = currentPage + 1;\r\n      queryClient.prefetchQuery([\"fllorplans\", nextPage], () =>\r\n        getFloorplans(pageSize, nextPage, token,history)\r\n      );\r\n    }\r\n  }, [currentPage, queryClient]);\r\n  return {\r\n    currentPage,\r\n    pageOptions,\r\n    floorPlansData,\r\n    hasNextPage,\r\n    hasPreviousPage,\r\n    total,\r\n    isLoading,\r\n    pagelengthnum,\r\n    pageSize,\r\n    toggle,\r\n    isOpen,\r\n\r\n    changeCurrentPage,\r\n  };\r\n};\r\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;EAAA;;EACjC,IAAIC,OAAO,GAAGJ,UAAU,EAAxB;EACA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC;EACA,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,CAAD,CAA9C;EACA,MAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC;;EACA,MAAMgB,iBAAiB,GAAIC,OAAD,IAAaJ,cAAc,CAACI,OAAD,CAArD;;EACA,MAAMC,WAAW,GAAGjB,cAAc,EAAlC;EAEA,MAAM;IACJkB,IAAI,EAAE;MAAEA,IAAI,EAAEC,cAAR;MAAwBC,WAAxB;MAAqCC,eAArC;MAAsDC;IAAtD,CADF;IAEJC;EAFI,IAGFpB,iBAAiB,CAAC,CAAC,YAAD,EAAeQ,WAAf,CAAD,EAA8B,MACjDT,aAAa,CAACW,QAAD,EAAWF,WAAX,EAAwBH,KAAxB,EAA8BH,OAA9B,CADM,CAHrB;;EAOA,MAAMmB,MAAM,GAAG,MAAM;IACnBjB,SAAS,CAAC,CAACD,MAAF,CAAT;EACD,CAFD;;EAGA,MAAMmB,aAAa,GAAIC,CAAD,IAAO;IAC3B,IAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,GAAvB,EAA4B;MAC1Bd,WAAW,CAAC,EAAD,CAAX;IACD,CAFD,MAEO,IAAIY,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,GAAvB,EAA4B;MACjCd,WAAW,CAAC,EAAD,CAAX;IACD,CAFM,MAEA,IAAIY,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,GAAvB,EAA4B;MACjCd,WAAW,CAAC,EAAD,CAAX;IACD;EACF,CARD;;EAUA,MAAMe,WAAW,GAAG;IAClBC,WAAW,EAAEjB,QADK;IAElBkB,SAAS,EAAET,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAW,CAFF;IAGlBU,MAAM,EAAE;EAHU,CAApB;EAMAlC,SAAS,CAAC,MAAM;IACd;IACA,IAAIsB,WAAJ,EAAiB;MACf,MAAMa,QAAQ,GAAGtB,WAAW,GAAG,CAA/B;MACAM,WAAW,CAACiB,aAAZ,CAA0B,CAAC,YAAD,EAAeD,QAAf,CAA1B,EAAoD,MAClD/B,aAAa,CAACW,QAAD,EAAWoB,QAAX,EAAqBzB,KAArB,EAA2BH,OAA3B,CADf;IAGD;EACF,CARQ,EAQN,CAACM,WAAD,EAAcM,WAAd,CARM,CAAT;EASA,OAAO;IACLN,WADK;IAELkB,WAFK;IAGLV,cAHK;IAILC,WAJK;IAKLC,eALK;IAMLC,KANK;IAOLC,SAPK;IAQLE,aARK;IASLZ,QATK;IAULW,MAVK;IAWLlB,MAXK;IAaLS;EAbK,CAAP;AAeD,CA3DM;;GAAMX,a;UACGH,U,EAMMD,c,EAKhBG,iB"},"metadata":{},"sourceType":"module"}