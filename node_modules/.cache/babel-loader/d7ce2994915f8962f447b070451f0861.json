{"ast":null,"code":"import axios from \"axios\";\nimport { del, get, post, put } from \"./api_helper\";\nimport * as url from \"./url_helper\";\nimport { DIOM_BASED_URLS } from \"../config/url\";\nimport { async } from \"@firebase/util\"; // Gets the logged in user data from local session\n\nconst getLoggedInUser = () => {\n  const user = localStorage.getItem(\"authUser\");\n  if (user) return JSON.parse(user);\n  return null;\n}; //is user is logged in\n\n\nconst isUserAuthenticated = () => {\n  return getLoggedInUser() !== null;\n}; // Register Method\n\n\nconst postRegister = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status >= 200 || response.status <= 299) return response.data;\n    throw response.data;\n  }).catch(err => {\n    var message;\n\n    if (err.response && err.response.status) {\n      switch (err.response.status) {\n        case 404:\n          message = \"Sorry! the page you are looking for could not be found\";\n          break;\n\n        case 500:\n          message = \"Sorry! something went wrong, please contact our support team\";\n          break;\n\n        case 401:\n          message = \"Invalid credentials\";\n          break;\n\n        default:\n          message = err[1];\n          break;\n      }\n    }\n\n    throw message;\n  });\n}; // Login Method\n\n\nconst postLogin = async (url, data) => {\n  const res = await fetch(`${DIOM_BASED_URLS}/diom/spaces/admin/login`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json, text/plain\",\n      \"Content-Type\": \"application/json;charset=UTF-8\"\n    },\n    body: JSON.stringify({\n      email: data.username,\n      password: data.password,\n      userDeviceToken: data.currentTokenOfUser\n    })\n  });\n  const resJson = await res.json();\n\n  if (!res.ok) {\n    throw new Error(resJson.error.message);\n  }\n\n  return resJson;\n}; // postForgetPwd\n\n\nconst postForgetPwd = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status === 400 || response.status === 500) throw response.data;\n    return response.data;\n  }).catch(err => {\n    throw err[1];\n  });\n}; // get Events\n\n\nexport const getEvents = () => get(url.GET_EVENTS); // add Events\n\nexport const addNewEvent = event => post(url.ADD_NEW_EVENT, event); // update Event\n\nexport const updateEvent = event => put(url.UPDATE_EVENT, event); // delete Event\n\nexport const deleteEvent = event => del(url.DELETE_EVENT, {\n  headers: {\n    event\n  }\n}); // get Categories\n\nexport const getCategories = () => get(url.GET_CATEGORIES); // get Products\n\nexport const getProducts = () => get(url.GET_PRODUCTS); // get Product detail\n\nexport const getProductDetail = id => get(`${url.GET_PRODUCTS_DETAIL}/${id}`, {\n  params: {\n    id\n  }\n}); // get orders\n\nexport const getOrders = () => get(url.GET_ORDERS); // add order\n\nexport const addNewOrder = order => post(url.ADD_NEW_ORDER, order); // update order\n\nexport const updateOrder = order => put(url.UPDATE_ORDER, order); // delete order\n\nexport const deleteOrder = order => del(url.DELETE_ORDER, {\n  headers: {\n    order\n  }\n}); // get cart data\n\nexport const getCartData = () => get(url.GET_CART_DATA); // get customers\n\nexport const getCustomers = () => get(url.GET_CUSTOMERS); // get shops\n\nexport const getShops = () => get(url.GET_SHOPS); // get chats\n\nexport const getChats = () => get(url.GET_CHATS); // get groups\n\nexport const getGroups = () => get(url.GET_GROUPS); // get Contacts\n\nexport const getContacts = () => get(url.GET_CONTACTS); // get messages\n\nexport const getMessages = function () {\n  let roomId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return get(`${url.GET_MESSAGES}/${roomId}`, {\n    params: {\n      roomId\n    }\n  });\n}; //get Bookings Today\n\nexport const getBookingsToday = () => get(url.GET_BOOKINGS_TODAY); // post messages\n\nexport const addMessage = message => post(url.ADD_MESSAGE, message);\nexport { getLoggedInUser, isUserAuthenticated, postRegister, postLogin, postForgetPwd };","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/diom(3)/src/helpers/fackBackend_Helper.js"],"names":["axios","del","get","post","put","url","DIOM_BASED_URLS","async","getLoggedInUser","user","localStorage","getItem","JSON","parse","isUserAuthenticated","postRegister","data","then","response","status","catch","err","message","postLogin","res","fetch","method","headers","Accept","body","stringify","email","username","password","userDeviceToken","currentTokenOfUser","resJson","json","ok","Error","error","postForgetPwd","getEvents","GET_EVENTS","addNewEvent","event","ADD_NEW_EVENT","updateEvent","UPDATE_EVENT","deleteEvent","DELETE_EVENT","getCategories","GET_CATEGORIES","getProducts","GET_PRODUCTS","getProductDetail","id","GET_PRODUCTS_DETAIL","params","getOrders","GET_ORDERS","addNewOrder","order","ADD_NEW_ORDER","updateOrder","UPDATE_ORDER","deleteOrder","DELETE_ORDER","getCartData","GET_CART_DATA","getCustomers","GET_CUSTOMERS","getShops","GET_SHOPS","getChats","GET_CHATS","getGroups","GET_GROUPS","getContacts","GET_CONTACTS","getMessages","roomId","GET_MESSAGES","getBookingsToday","GET_BOOKINGS_TODAY","addMessage","ADD_MESSAGE"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { del, get, post, put } from \"./api_helper\";\r\nimport * as url from \"./url_helper\";\r\nimport { DIOM_BASED_URLS } from \"../config/url\";\r\nimport { async } from \"@firebase/util\";\r\n\r\n// Gets the logged in user data from local session\r\nconst getLoggedInUser = () => {\r\n  const user = localStorage.getItem(\"authUser\");\r\n  if (user) return JSON.parse(user);\r\n  return null;\r\n};\r\n\r\n//is user is logged in\r\nconst isUserAuthenticated = () => {\r\n  return getLoggedInUser() !== null;\r\n};\r\n\r\n// Register Method\r\nconst postRegister = (url, data) => {\r\n  return axios\r\n    .post(url, data)\r\n    .then((response) => {\r\n      if (response.status >= 200 || response.status <= 299)\r\n        return response.data;\r\n      throw response.data;\r\n    })\r\n    .catch((err) => {\r\n      var message;\r\n      if (err.response && err.response.status) {\r\n        switch (err.response.status) {\r\n          case 404:\r\n            message = \"Sorry! the page you are looking for could not be found\";\r\n            break;\r\n          case 500:\r\n            message =\r\n              \"Sorry! something went wrong, please contact our support team\";\r\n            break;\r\n          case 401:\r\n            message = \"Invalid credentials\";\r\n            break;\r\n          default:\r\n            message = err[1];\r\n            break;\r\n        }\r\n      }\r\n      throw message;\r\n    });\r\n};\r\n\r\n// Login Method\r\nconst postLogin = async (url, data) => {\r\n  const res = await fetch(`${DIOM_BASED_URLS}/diom/spaces/admin/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json, text/plain\",\r\n      \"Content-Type\": \"application/json;charset=UTF-8\",\r\n    },\r\n    body: JSON.stringify({\r\n      email: data.username,\r\n      password: data.password,\r\n      userDeviceToken: data.currentTokenOfUser,\r\n    }),\r\n  });\r\n  const resJson = await res.json();\r\n  if (!res.ok) {\r\n    throw new Error(resJson.error.message);\r\n  }\r\n\r\n  return resJson;\r\n};\r\n\r\n// postForgetPwd\r\nconst postForgetPwd = (url, data) => {\r\n  return axios\r\n    .post(url, data)\r\n    .then((response) => {\r\n      if (response.status === 400 || response.status === 500)\r\n        throw response.data;\r\n      return response.data;\r\n    })\r\n    .catch((err) => {\r\n      throw err[1];\r\n    });\r\n};\r\n// get Events\r\nexport const getEvents = () => get(url.GET_EVENTS);\r\n\r\n// add Events\r\nexport const addNewEvent = (event) => post(url.ADD_NEW_EVENT, event);\r\n\r\n// update Event\r\nexport const updateEvent = (event) => put(url.UPDATE_EVENT, event);\r\n\r\n// delete Event\r\nexport const deleteEvent = (event) =>\r\n  del(url.DELETE_EVENT, { headers: { event } });\r\n\r\n// get Categories\r\nexport const getCategories = () => get(url.GET_CATEGORIES);\r\n\r\n// get Products\r\nexport const getProducts = () => get(url.GET_PRODUCTS);\r\n\r\n// get Product detail\r\nexport const getProductDetail = (id) =>\r\n  get(`${url.GET_PRODUCTS_DETAIL}/${id}`, { params: { id } });\r\n\r\n// get orders\r\nexport const getOrders = () => get(url.GET_ORDERS);\r\n\r\n// add order\r\nexport const addNewOrder = (order) => post(url.ADD_NEW_ORDER, order);\r\n\r\n// update order\r\nexport const updateOrder = (order) => put(url.UPDATE_ORDER, order);\r\n\r\n// delete order\r\nexport const deleteOrder = (order) =>\r\n  del(url.DELETE_ORDER, { headers: { order } });\r\n\r\n// get cart data\r\nexport const getCartData = () => get(url.GET_CART_DATA);\r\n\r\n// get customers\r\nexport const getCustomers = () => get(url.GET_CUSTOMERS);\r\n\r\n// get shops\r\nexport const getShops = () => get(url.GET_SHOPS);\r\n\r\n// get chats\r\nexport const getChats = () => get(url.GET_CHATS);\r\n\r\n// get groups\r\nexport const getGroups = () => get(url.GET_GROUPS);\r\n\r\n// get Contacts\r\nexport const getContacts = () => get(url.GET_CONTACTS);\r\n\r\n// get messages\r\nexport const getMessages = (roomId = \"\") =>\r\n  get(`${url.GET_MESSAGES}/${roomId}`, { params: { roomId } });\r\n\r\n//get Bookings Today\r\nexport const getBookingsToday = () => get(url.GET_BOOKINGS_TODAY);\r\n\r\n// post messages\r\nexport const addMessage = (message) => post(url.ADD_MESSAGE, message);\r\n\r\nexport {\r\n  getLoggedInUser,\r\n  isUserAuthenticated,\r\n  postRegister,\r\n  postLogin,\r\n  postForgetPwd,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}