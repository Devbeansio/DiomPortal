{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"; // Login Redux States\n\nimport { CHECK_LOGIN, LOGOUT_USER } from \"./actionTypes\";\nimport { apiError, loginUserSuccessful, logoutUserSuccess } from \"./actions\"; // AUTH related methods\n\nimport { postLogin } from \"../../../helpers/fackBackend_Helper\";\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"; //Initilize firebase\n\nconst fireBaseBackend = getFirebaseBackend(); //If user is login then dispatch redux action's are directly from here.\n\nfunction* loginUser(_ref) {\n  let {\n    payload: {\n      user,\n      history\n    }\n  } = _ref;\n\n  try {\n    const response = yield call(postLogin, \"/post-login\", {\n      username: user.username,\n      password: user.password\n    });\n    yield put(loginUserSuccessful(response));\n    debug; // localStorage.setItem(\"authUser\", JSON.stringify(response));\n\n    history.push(\"/mydashboard\");\n    console.log(\"saga success 1\", response);\n  } catch (error) {\n    console.log(\"error error\", error);\n    yield put(apiError(error));\n  }\n}\n\nfunction* logoutUser(_ref2) {\n  let {\n    payload: {\n      history\n    }\n  } = _ref2;\n\n  try {\n    localStorage.removeItem(\"authUser\");\n\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.logout);\n      yield put(logoutUserSuccess(response));\n    }\n\n    history.push(\"/login\");\n    localStorage.setItem(\"Token\", \"\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nexport function* watchUserLogin() {\n  yield takeEvery(CHECK_LOGIN, loginUser);\n}\nexport function* watchUserLogout() {\n  yield takeEvery(LOGOUT_USER, logoutUser);\n}\n\nfunction* loginSaga() {\n  yield all([fork(watchUserLogin), fork(watchUserLogout)]);\n}\n\nexport default loginSaga;","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/diom (1)/diom/src/store/auth/login/saga.js"],"names":["takeEvery","fork","put","all","call","CHECK_LOGIN","LOGOUT_USER","apiError","loginUserSuccessful","logoutUserSuccess","postLogin","getFirebaseBackend","fireBaseBackend","loginUser","payload","user","history","response","username","password","debug","push","console","log","error","logoutUser","localStorage","removeItem","process","env","REACT_APP_DEFAULTAUTH","logout","setItem","watchUserLogin","watchUserLogout","loginSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,eAAzC;AACA,SAASC,QAAT,EAAmBC,mBAAnB,EAAwCC,iBAAxC,QAAiE,WAAjE,C,CAEA;;AACA,SAASC,SAAT,QAA0B,qCAA1B;AACA,SAASC,kBAAT,QAAmC,kCAAnC,C,CAEA;;AACA,MAAMC,eAAe,GAAGD,kBAAkB,EAA1C,C,CAEA;;AACA,UAAUE,SAAV,OAAoD;AAAA,MAAhC;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR;AAAX,GAAgC;;AAClD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMb,IAAI,CAACM,SAAD,EAAY,aAAZ,EAA2B;AACpDQ,MAAAA,QAAQ,EAAEH,IAAI,CAACG,QADqC;AAEpDC,MAAAA,QAAQ,EAAEJ,IAAI,CAACI;AAFqC,KAA3B,CAA3B;AAIA,UAAMjB,GAAG,CAACM,mBAAmB,CAACS,QAAD,CAApB,CAAT;AACAG,IAAAA,KAAK,CANH,CAOF;;AACAJ,IAAAA,OAAO,CAACK,IAAR,CAAa,cAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,QAA9B;AAED,GAXD,CAWE,OAAOO,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,KAA3B;AACA,UAAMtB,GAAG,CAACK,QAAQ,CAACiB,KAAD,CAAT,CAAT;AACD;AACF;;AAED,UAAUC,UAAV,QAA+C;AAAA,MAA1B;AAAEX,IAAAA,OAAO,EAAE;AAAEE,MAAAA;AAAF;AAAX,GAA0B;;AAC7C,MAAI;AACFU,IAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;;AAEA,QAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACpD,YAAMb,QAAQ,GAAG,MAAMb,IAAI,CAACQ,eAAe,CAACmB,MAAjB,CAA3B;AACA,YAAM7B,GAAG,CAACO,iBAAiB,CAACQ,QAAD,CAAlB,CAAT;AACD;;AAEDD,IAAAA,OAAO,CAACK,IAAR,CAAa,QAAb;AACAK,IAAAA,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8B,EAA9B;AACD,GAVD,CAUE,OAAOR,KAAP,EAAc;AACd,UAAMtB,GAAG,CAACK,QAAQ,CAACiB,KAAD,CAAT,CAAT;AACD;AACF;;AAED,OAAO,UAAUS,cAAV,GAA2B;AAChC,QAAMjC,SAAS,CAACK,WAAD,EAAcQ,SAAd,CAAf;AACD;AAED,OAAO,UAAUqB,eAAV,GAA4B;AACjC,QAAMlC,SAAS,CAACM,WAAD,EAAcmB,UAAd,CAAf;AACD;;AAED,UAAUU,SAAV,GAAsB;AACpB,QAAMhC,GAAG,CAAC,CAACF,IAAI,CAACgC,cAAD,CAAL,EAAuBhC,IAAI,CAACiC,eAAD,CAA3B,CAAD,CAAT;AACD;;AAED,eAAeC,SAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\r\n\r\n// Login Redux States\r\nimport { CHECK_LOGIN, LOGOUT_USER } from \"./actionTypes\";\r\nimport { apiError, loginUserSuccessful, logoutUserSuccess } from \"./actions\";\r\n\r\n// AUTH related methods\r\nimport { postLogin } from \"../../../helpers/fackBackend_Helper\";\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\r\n\r\n//Initilize firebase\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n//If user is login then dispatch redux action's are directly from here.\r\nfunction* loginUser({ payload: { user, history } }) {\r\n  try {\r\n    const response = yield call(postLogin, \"/post-login\", {\r\n      username: user.username,\r\n      password: user.password,\r\n    });\r\n    yield put(loginUserSuccessful(response));\r\n    debug\r\n    // localStorage.setItem(\"authUser\", JSON.stringify(response));\r\n    history.push(\"/mydashboard\");\r\n    console.log(\"saga success 1\", response);\r\n    \r\n  } catch (error) {\r\n    console.log(\"error error\", error);\r\n    yield put(apiError(error));\r\n  }\r\n}\r\n\r\nfunction* logoutUser({ payload: { history } }) {\r\n  try {\r\n    localStorage.removeItem(\"authUser\");\r\n\r\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n      const response = yield call(fireBaseBackend.logout);\r\n      yield put(logoutUserSuccess(response));\r\n    }\r\n\r\n    history.push(\"/login\");\r\n    localStorage.setItem(\"Token\", \"\");\r\n  } catch (error) {\r\n    yield put(apiError(error));\r\n  }\r\n}\r\n\r\nexport function* watchUserLogin() {\r\n  yield takeEvery(CHECK_LOGIN, loginUser);\r\n}\r\n\r\nexport function* watchUserLogout() {\r\n  yield takeEvery(LOGOUT_USER, logoutUser);\r\n}\r\n\r\nfunction* loginSaga() {\r\n  yield all([fork(watchUserLogin), fork(watchUserLogout)]);\r\n}\r\n\r\nexport default loginSaga;\r\n"]},"metadata":{},"sourceType":"module"}