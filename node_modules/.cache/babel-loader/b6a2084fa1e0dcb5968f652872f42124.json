{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport { getcustomer } from \"../../../../APIS/customerCheckedIn\";\nimport { getuserdetails } from \"../../../../APIS/userProfle\";\nimport { useParams } from \"react-router-dom\";\nimport { usePaginatedQuery } from \"../../../../hooks/query\";\nimport { getUserpastbookings } from \"../../../../APIS/customerCheckedIn\";\nimport { getUserscheduledbookings } from \"../../../../APIS/customerCheckedIn\";\nimport { getUseractivebookings } from \"../../../../APIS/customerCheckedIn\";\nexport const UseCheckedinCustomerDetailed = () => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    id\n  } = useParams();\n  const token = localStorage.getItem(\"Token\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n\n  const changeCurrentPage = pageNum => setCurrentPage(pageNum);\n\n  const [activeTabJustify, setActiveTabJustify] = useState(\"1\");\n  const queryClient = useQueryClient();\n  const {\n    data: {\n      data: customerdetailedData\n    },\n    isLoading\n  } = usePaginatedQuery([\"customerdetails\", id], () => getuserdetails(pageSize, currentPage, token, id));\n  const {\n    data: {\n      data: userActiveBookingData,\n      total,\n      hasNextPage,\n      hasPreviousPage\n    }\n  } = usePaginatedQuery([\"activecustomer\", `${pageSize}`, `${currentPage}`], () => getUseractivebookings(pageSize, currentPage, token, id));\n  const {\n    data: {\n      data: userSechduledBookigsData\n    }\n  } = usePaginatedQuery([\"scheduledcustomer\", `${pageSize}`, `${currentPage}`], () => getUserscheduledbookings(pageSize, currentPage, token, id));\n  const {\n    data: {\n      data: usePastBookingsData\n    }\n  } = usePaginatedQuery([\"pastcustomer\", `${pageSize}`, `${currentPage}`], () => getUserpastbookings(pageSize, currentPage, token, id));\n\n  const toggleCustomJustified = tab => {\n    if (activeTabJustify !== tab) {\n      setActiveTabJustify(tab);\n    }\n  };\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const pagelengthnum = e => {\n    if (e.target.value === \"1\") {\n      setPageSize(10);\n    } else if (e.target.value === \"2\") {\n      setPageSize(30);\n    } else if (e.target.value === \"3\") {\n      setPageSize(50);\n    }\n  };\n\n  const pageOptions = {\n    sizePerPage: pageSize,\n    totalSize: total !== null && total !== void 0 ? total : 0,\n    custom: true\n  };\n  useEffect(() => {\n    // FOR PRE-FETCHING NEXT PAGE\n    if (hasNextPage) {\n      const nextPage = currentPage + 1;\n      queryClient.prefetchQuery([\"customerdetails\", nextPage], () => getuserdetails(pageSize, currentPage, token, id));\n    }\n  }, [currentPage, queryClient]);\n  return {\n    currentPage,\n    pageOptions,\n    customerdetailedData,\n    userActiveBookingData,\n    userSechduledBookigsData,\n    usePastBookingsData,\n    // activeTabJustify,\n    isLoading,\n    toggleCustomJustified,\n    activeTabJustify,\n    setActiveTabJustify,\n    pagelengthnum,\n    pageSize,\n    toggle,\n    isOpen,\n    changeCurrentPage\n  };\n};\n\n_s(UseCheckedinCustomerDetailed, \"oIOxSTXPEP2y8onFvhKU43+jtHo=\", false, function () {\n  return [useParams, useQueryClient, usePaginatedQuery, usePaginatedQuery, usePaginatedQuery, usePaginatedQuery];\n});\n\n_c = UseCheckedinCustomerDetailed;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseCheckedinCustomerDetailed\");","map":{"version":3,"sources":["D:/diom working project/staging/src/pages/MyDashboard/CheckedinCustomer/CheckedinCustomerDetail/useCheckedinCustomerDetailed.js"],"names":["useEffect","useState","useQueryClient","getcustomer","getuserdetails","useParams","usePaginatedQuery","getUserpastbookings","getUserscheduledbookings","getUseractivebookings","UseCheckedinCustomerDetailed","isOpen","setIsOpen","id","token","localStorage","getItem","currentPage","setCurrentPage","pageSize","setPageSize","changeCurrentPage","pageNum","activeTabJustify","setActiveTabJustify","queryClient","data","customerdetailedData","isLoading","userActiveBookingData","total","hasNextPage","hasPreviousPage","userSechduledBookigsData","usePastBookingsData","toggleCustomJustified","tab","toggle","pagelengthnum","e","target","value","pageOptions","sizePerPage","totalSize","custom","nextPage","prefetchQuery"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\nimport { getcustomer } from \"../../../../APIS/customerCheckedIn\";\r\nimport { getuserdetails } from \"../../../../APIS/userProfle\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { usePaginatedQuery } from \"../../../../hooks/query\";\r\nimport { getUserpastbookings } from \"../../../../APIS/customerCheckedIn\";\r\nimport { getUserscheduledbookings } from \"../../../../APIS/customerCheckedIn\";\r\nimport { getUseractivebookings } from \"../../../../APIS/customerCheckedIn\";\r\n\r\nexport const UseCheckedinCustomerDetailed = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const { id } = useParams();\r\n  const token = localStorage.getItem(\"Token\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(50);\r\n  const changeCurrentPage = (pageNum) => setCurrentPage(pageNum);\r\n  const [activeTabJustify, setActiveTabJustify] = useState(\"1\");\r\n  const queryClient = useQueryClient();\r\n\r\n  const {\r\n    data: { data: customerdetailedData },\r\n    isLoading,\r\n  } = usePaginatedQuery([\"customerdetails\", id], () =>\r\n    getuserdetails(pageSize, currentPage, token, id)\r\n  );\r\n\r\n  const {\r\n    data: { data: userActiveBookingData, total, hasNextPage, hasPreviousPage },\r\n  } = usePaginatedQuery([\"activecustomer\",`${pageSize}`,`${currentPage}`], () =>\r\n    getUseractivebookings(pageSize, currentPage, token, id)\r\n  );\r\n\r\n  const {\r\n    data: { data: userSechduledBookigsData },\r\n  } = usePaginatedQuery([\"scheduledcustomer\",`${pageSize}`,`${currentPage}`], () =>\r\n    getUserscheduledbookings(pageSize, currentPage, token, id)\r\n  );\r\n\r\n  const {\r\n    data: { data: usePastBookingsData },\r\n  } = usePaginatedQuery([\"pastcustomer\", `${pageSize}`,`${currentPage}`], () =>\r\n    getUserpastbookings(pageSize, currentPage, token, id)\r\n  );\r\n\r\n  const toggleCustomJustified = (tab) => {\r\n    if (activeTabJustify !== tab) {\r\n      setActiveTabJustify(tab);\r\n    }\r\n  };\r\n\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n  const pagelengthnum = (e) => {\r\n    if (e.target.value === \"1\") {\r\n      setPageSize(10);\r\n    } else if (e.target.value === \"2\") {\r\n      setPageSize(30);\r\n    } else if (e.target.value === \"3\") {\r\n      setPageSize(50);\r\n    }\r\n  };\r\n  const pageOptions = {\r\n    sizePerPage: pageSize,\r\n    totalSize: total ?? 0,\r\n    custom: true,\r\n  };\r\n\r\n  useEffect(() => {\r\n    // FOR PRE-FETCHING NEXT PAGE\r\n    if (hasNextPage) {\r\n      const nextPage = currentPage + 1;\r\n      queryClient.prefetchQuery([\"customerdetails\", nextPage], () =>\r\n        getuserdetails(pageSize, currentPage, token, id)\r\n      );\r\n    }\r\n  }, [currentPage, queryClient]);\r\n\r\n  return {\r\n    currentPage,\r\n    pageOptions,\r\n    customerdetailedData,\r\n    userActiveBookingData,\r\n    userSechduledBookigsData,\r\n    usePastBookingsData,\r\n    // activeTabJustify,\r\n    isLoading,\r\n    toggleCustomJustified,\r\n    activeTabJustify,\r\n    setActiveTabJustify,\r\n    pagelengthnum,\r\n    pageSize,\r\n    toggle,\r\n    isOpen,\r\n    changeCurrentPage,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}