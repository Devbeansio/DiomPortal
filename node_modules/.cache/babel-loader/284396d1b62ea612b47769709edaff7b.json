{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSnackbar } from \"notistack\";\nimport { usePaginatedQuery } from '../../../hooks/query';\nimport { getNewreports, getPastreports } from '../../../APIS/reports';\n\nconst useReportRequest = () => {\n  _s();\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [currentPage, setCurrentPage] = useState(1);\n  const reportTypeOptions = [{\n    label: \"Booking Report\",\n    value: \"BOOKING_REPORTS\"\n  }, {\n    label: \"User Report\",\n    value: \"USER_REPORTS\"\n  }, {\n    label: \"User Ananlysis Report\",\n    value: \"USER_ANALYSIS_REPORTS\"\n  }, {\n    label: \"Cancelled Bookings\",\n    value: \"CANCELLED_BOOKINGS_REPORTS\"\n  }];\n\n  const retryFunc = () => {\n    // alert(\" i am retry presses\")\n    const message = 'Gathering Report Data';\n    enqueueSnackbar(message, {\n      variant: 'success'\n    }); // const message1 = 'Exporting Report ';\n    //   enqueueSnackbar(message1, { \n    //     variant: 'success', \n    // });\n  };\n\n  const downloadFunc = () => {\n    const message1 = 'Your Report has started  to download';\n    enqueueSnackbar(message1, {\n      variant: 'success'\n    });\n  }; // *************\n\n\n  const {\n    data: {\n      data: pastReportsDataa,\n      hasNextPage,\n      hasPreviousPage,\n      total\n    },\n    isLoading\n  } = usePaginatedQuery([\"pastReprtssData\"], () => getPastreports(token)); // const pastReportsDataa = pastReportsData.data;\n  // console.log(\"past reports : \",pastReportsData)\n  // *************\n  // *************\n\n  const {\n    data: {\n      data: newReportsDataa\n    }\n  } = usePaginatedQuery([\"newReportssData\", currentPage], () => getNewreports(token)); // const newReportsDataa = newReportsData.data;\n  // console.log(\"New reports : \",newReportsDataa)\n  // *************\n\n  return {\n    reportTypeOptions,\n    retryFunc,\n    downloadFunc,\n    pastReportsDataa,\n    newReportsDataa\n  };\n};\n\n_s(useReportRequest, \"KyxF9tvCcBK1k4JrSIQaPwHIvt0=\", false, function () {\n  return [useSnackbar, usePaginatedQuery, usePaginatedQuery];\n});\n\nexport default useReportRequest;","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/diom(3)/src/pages/Reports/generateodf/useReportRequest.js"],"names":["React","useSnackbar","usePaginatedQuery","getNewreports","getPastreports","useReportRequest","enqueueSnackbar","currentPage","setCurrentPage","useState","reportTypeOptions","label","value","retryFunc","message","variant","downloadFunc","message1","data","pastReportsDataa","hasNextPage","hasPreviousPage","total","isLoading","token","newReportsDataa"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAUC,WAAV,QAA6B,WAA7B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,uBAA9C;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAsBL,WAAW,EAAvC;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCC,QAAQ,CAAC,CAAD,CAA9C;AACE,QAAMC,iBAAiB,GAAG,CACxB;AAAEC,IAAAA,KAAK,EAAE,gBAAT;AAA2BC,IAAAA,KAAK,EAAE;AAAlC,GADwB,EAExB;AAAED,IAAAA,KAAK,EAAE,aAAT;AAAwBC,IAAAA,KAAK,EAAE;AAA/B,GAFwB,EAGxB;AAAED,IAAAA,KAAK,EAAE,uBAAT;AAAkCC,IAAAA,KAAK,EAAE;AAAzC,GAHwB,EAIxB;AAAED,IAAAA,KAAK,EAAE,oBAAT;AAA+BC,IAAAA,KAAK,EAAE;AAAtC,GAJwB,CAA1B;;AAOE,QAAMC,SAAS,GAAC,MAAI;AAClB;AACA,UAAMC,OAAO,GAAG,uBAAhB;AACAR,IAAAA,eAAe,CAACQ,OAAD,EAAU;AACvBC,MAAAA,OAAO,EAAE;AADc,KAAV,CAAf,CAHkB,CAMpB;AACA;AACA;AACA;AACC,GAVD;;AAWA,QAAMC,YAAY,GAAC,MAAI;AACrB,UAAMC,QAAQ,GAAG,sCAAjB;AACAX,IAAAA,eAAe,CAACW,QAAD,EAAW;AACxBF,MAAAA,OAAO,EAAE;AADe,KAAX,CAAf;AAGD,GALD,CArByB,CAgC/B;;;AAEA,QAAM;AACJG,IAAAA,IAAI,EAAE;AAAEA,MAAAA,IAAI,EAAEC,gBAAR;AAA0BC,MAAAA,WAA1B;AAAuCC,MAAAA,eAAvC;AAAwDC,MAAAA;AAAxD,KADF;AAEJC,IAAAA;AAFI,MAGFrB,iBAAiB,CACnB,CAAC,iBAAD,CADmB,EAEnB,MACAE,cAAc,CAACoB,KAAD,CAHK,CAHrB,CAlC+B,CA2C/B;AACA;AAEA;AACA;;AACA,QAAM;AACJN,IAAAA,IAAI,EAAE;AAAEA,MAAAA,IAAI,EAAEO;AAAR;AADF,MAGFvB,iBAAiB,CACnB,CAAC,iBAAD,EAAmBK,WAAnB,CADmB,EAEnB,MACAJ,aAAa,CAACqB,KAAD,CAHM,CAHrB,CAhD+B,CAyD/B;AACA;AAEA;;AAGE,SACE;AACId,IAAAA,iBADJ;AAEIG,IAAAA,SAFJ;AAGIG,IAAAA,YAHJ;AAIIG,IAAAA,gBAJJ;AAKIM,IAAAA;AALJ,GADF;AASD,CAxED;;GAAMpB,gB;UACwBJ,W,EAoC1BC,iB,EAcAA,iB;;;AAuBJ,eAAeG,gBAAf","sourcesContent":["import React from 'react'\r\nimport {  useSnackbar } from \"notistack\";\r\nimport { usePaginatedQuery } from '../../../hooks/query';\r\nimport { getNewreports, getPastreports } from '../../../APIS/reports';\r\n\r\nconst useReportRequest = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n    const reportTypeOptions = [\r\n      { label: \"Booking Report\", value: \"BOOKING_REPORTS\" },\r\n      { label: \"User Report\", value: \"USER_REPORTS\" },\r\n      { label: \"User Ananlysis Report\", value: \"USER_ANALYSIS_REPORTS\" },\r\n      { label: \"Cancelled Bookings\", value: \"CANCELLED_BOOKINGS_REPORTS\" },\r\n      ];\r\n\r\n      const retryFunc=()=>{\r\n        // alert(\" i am retry presses\")\r\n        const message = 'Gathering Report Data';\r\n        enqueueSnackbar(message, { \r\n          variant: 'success', \r\n      });\r\n      // const message1 = 'Exporting Report ';\r\n      //   enqueueSnackbar(message1, { \r\n      //     variant: 'success', \r\n      // });\r\n      }\r\n      const downloadFunc=()=>{\r\n        const message1 = 'Your Report has started  to download';\r\n        enqueueSnackbar(message1, { \r\n          variant: 'success', \r\n      });\r\n      }\r\n\r\n\r\n\r\n\r\n      \r\n// *************\r\n\r\nconst {\r\n  data: { data: pastReportsDataa, hasNextPage, hasPreviousPage, total },\r\n  isLoading,\r\n} = usePaginatedQuery(\r\n  [\"pastReprtssData\"],\r\n  () =>\r\n  getPastreports(token)\r\n);\r\n\r\n// const pastReportsDataa = pastReportsData.data;\r\n// console.log(\"past reports : \",pastReportsData)\r\n\r\n// *************\r\n// *************\r\nconst {\r\n  data: { data: newReportsDataa},\r\n  \r\n} = usePaginatedQuery(\r\n  [\"newReportssData\",currentPage],\r\n  () =>\r\n  getNewreports(token)\r\n);\r\n\r\n// const newReportsDataa = newReportsData.data;\r\n// console.log(\"New reports : \",newReportsDataa)\r\n\r\n// *************\r\n\r\n\r\n  return (\r\n    {\r\n        reportTypeOptions,\r\n        retryFunc,\r\n        downloadFunc,\r\n        pastReportsDataa,\r\n        newReportsDataa\r\n    }\r\n  )\r\n}\r\n\r\nexport default useReportRequest"]},"metadata":{},"sourceType":"module"}