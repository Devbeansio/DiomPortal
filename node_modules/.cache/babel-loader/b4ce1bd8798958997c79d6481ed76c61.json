{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport { usePaginatedQuery } from \"../../hooks/query\";\nimport { getNewreports, getPastreports } from \"../../APIS/reports\";\nimport { QueryClient } from \"react-query\";\nimport { DIOM_BASED_URLS } from \"../../config/url\";\nimport { toast } from \"react-toastify\";\n\nconst useReportRequest = () => {\n  _s();\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const token = localStorage.getItem(\"Token\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [isOpen, setIsOpen] = useState(false);\n  const [newOldReportsData, setNewOldReportsData] = useState([]);\n  const queryClient = new QueryClient();\n  const [postFilter, setPostFilter] = useState(false);\n  const [selectedReportType, setSelectedReportType] = useState(\"USER_REPORTS\");\n\n  const changeCurrentPage = pageNum => setCurrentPage(pageNum);\n\n  const reportTypeOptions = [{\n    label: \"Booking Report\",\n    value: \"BOOKING_REPORTS\"\n  }, {\n    label: \"User Report\",\n    value: \"USER_REPORTS\"\n  }, {\n    label: \"User Ananlysis Report\",\n    value: \"USER_ANALYSIS_REPORTS\"\n  }, {\n    label: \"Cancelled Bookings\",\n    value: \"CANCELLED_BOOKINGS_REPORTS\"\n  }];\n\n  const retryFunc = () => {\n    const message = \"Gathering Report Data\";\n    enqueueSnackbar(message, {\n      variant: \"success\"\n    });\n  };\n\n  const pageOptions = {\n    sizePerPage: pageSize,\n    totalSize: pastTotal !== null && pastTotal !== void 0 ? pastTotal : 0,\n    custom: true\n  };\n\n  const pagelengthnum = e => {\n    if (e.target.value === \"1\") {\n      setPageSize(10);\n    } else if (e.target.value === \"2\") {\n      setPageSize(30);\n    } else if (e.target.value === \"3\") {\n      setPageSize(50);\n    }\n  };\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const downloadFunc = rowId => {\n    const message1 = \"Your Report has started  to download\";\n    enqueueSnackbar(message1, {\n      variant: \"success\"\n    });\n    fetch(`${DIOM_BASED_URLS}/reports/commands`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json, text/plain\",\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n        Authorization: \"Bearer \" + token\n      },\n      body: JSON.stringify({\n        id: `${rowId}`,\n        command: \"MARK_READ\"\n      })\n    }).then(result3 => {}).catch(error => toast.error(\" Something went wrong\"));\n  };\n\n  const reportTyperequestFunc = e => {\n    setPostFilter(true);\n    setSelectedReportType(e.value);\n  }; // *************\n\n\n  const {\n    data: {\n      data: pastReportsDataa,\n      hasNextPage: pastHasNextPage,\n      hasPreviousPage: pastHasPreviousPage,\n      total: pastTotal,\n      refetch: pastReportsRefteh\n    },\n    isLoading\n  } = usePaginatedQuery([\"pastReprtssData\", `${selectedReportType}, ${pageSize}`], () => getPastreports(token, selectedReportType, postFilter, pageSize, currentPage)); // *************\n  // *************\n\n  const {\n    data: {\n      data: newReportsDataa,\n      hasNextPage: newHasNextPage,\n      hasPreviousPage: newHasPreviousPage,\n      total: newTotal,\n      refetch: newReportsRefteh\n    }\n  } = usePaginatedQuery([\"newReportssData\",, `${selectedReportType},${pageSize}`], () => getNewreports(token, selectedReportType, postFilter, pageSize, currentPage));\n  return {\n    reportTypeOptions,\n    retryFunc,\n    downloadFunc,\n    pastReportsDataa,\n    newReportsDataa,\n    newOldReportsData,\n    setNewOldReportsData,\n    isLoading,\n    reportTyperequestFunc,\n    pastHasNextPage,\n    pastTotal,\n    pastHasPreviousPage,\n    pastReportsRefteh,\n    newHasNextPage,\n    newHasPreviousPage,\n    newTotal,\n    newReportsRefteh,\n    pagelengthnum,\n    toggle,\n    isOpen,\n    pageSize,\n    currentPage,\n    changeCurrentPage,\n    pageOptions\n  };\n};\n\n_s(useReportRequest, \"6OnsVAKPboMEggfBXPvptUdGAlM=\", false, function () {\n  return [useSnackbar, usePaginatedQuery, usePaginatedQuery];\n});\n\nexport default useReportRequest;","map":{"version":3,"sources":["D:/diom working project/staging/src/pages/Reports/useReportRequest.js"],"names":["React","useState","useEffect","useSnackbar","usePaginatedQuery","getNewreports","getPastreports","QueryClient","DIOM_BASED_URLS","toast","useReportRequest","enqueueSnackbar","token","localStorage","getItem","currentPage","setCurrentPage","pageSize","setPageSize","isOpen","setIsOpen","newOldReportsData","setNewOldReportsData","queryClient","postFilter","setPostFilter","selectedReportType","setSelectedReportType","changeCurrentPage","pageNum","reportTypeOptions","label","value","retryFunc","message","variant","pageOptions","sizePerPage","totalSize","pastTotal","custom","pagelengthnum","e","target","toggle","downloadFunc","rowId","message1","fetch","method","headers","Accept","Authorization","body","JSON","stringify","id","command","then","result3","catch","error","reportTyperequestFunc","data","pastReportsDataa","hasNextPage","pastHasNextPage","hasPreviousPage","pastHasPreviousPage","total","refetch","pastReportsRefteh","isLoading","newReportsDataa","newHasNextPage","newHasPreviousPage","newTotal","newReportsRefteh"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { usePaginatedQuery } from \"../../hooks/query\";\r\nimport { getNewreports, getPastreports } from \"../../APIS/reports\";\r\nimport { QueryClient } from \"react-query\";\r\nimport { DIOM_BASED_URLS } from \"../../config/url\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useReportRequest = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const token = localStorage.getItem(\"Token\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(50);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [newOldReportsData, setNewOldReportsData] = useState([]);\r\n  const queryClient = new QueryClient();\r\n  const [postFilter, setPostFilter] = useState(false);\r\n  const [selectedReportType, setSelectedReportType] = useState(\"USER_REPORTS\");\r\n  const changeCurrentPage = (pageNum) => setCurrentPage(pageNum);\r\n  const reportTypeOptions = [\r\n    { label: \"Booking Report\", value: \"BOOKING_REPORTS\" },\r\n    { label: \"User Report\", value: \"USER_REPORTS\" },\r\n    { label: \"User Ananlysis Report\", value: \"USER_ANALYSIS_REPORTS\" },\r\n    { label: \"Cancelled Bookings\", value: \"CANCELLED_BOOKINGS_REPORTS\" },\r\n  ];\r\n\r\n  const retryFunc = () => {\r\n    const message = \"Gathering Report Data\";\r\n    enqueueSnackbar(message, {\r\n      variant: \"success\",\r\n    });\r\n  };\r\n\r\n  const pageOptions = {\r\n    sizePerPage: pageSize,\r\n    totalSize: pastTotal  ?? 0,\r\n    custom: true,\r\n  };\r\n\r\n  const pagelengthnum = (e) => {\r\n    \r\n    if (e.target.value === \"1\") {\r\n      setPageSize(10);\r\n    } else if (e.target.value === \"2\") {\r\n      setPageSize(30);\r\n    } else if (e.target.value === \"3\") {\r\n      setPageSize(50);\r\n    }\r\n  };\r\n\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const downloadFunc = (rowId) => {\r\n    const message1 = \"Your Report has started  to download\";\r\n    enqueueSnackbar(message1, {\r\n      variant: \"success\",\r\n    });\r\n    fetch(`${DIOM_BASED_URLS}/reports/commands`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n      body: JSON.stringify({\r\n        id: `${rowId}`,\r\n        command: \"MARK_READ\",\r\n      }),\r\n    })\r\n      .then((result3) => {})\r\n      .catch((error) => toast.error(\" Something went wrong\"));\r\n  };\r\n\r\n  const reportTyperequestFunc = (e) => {\r\n    setPostFilter(true);\r\n    setSelectedReportType(e.value);\r\n  };\r\n\r\n  // *************\r\n\r\n  const {\r\n    data: {\r\n      data: pastReportsDataa,\r\n      hasNextPage: pastHasNextPage,\r\n      hasPreviousPage: pastHasPreviousPage,\r\n      total: pastTotal,\r\n      refetch: pastReportsRefteh,\r\n      \r\n    },\r\n    isLoading,\r\n  } = usePaginatedQuery([\"pastReprtssData\", `${selectedReportType}, ${pageSize}`], () =>\r\n    getPastreports(token, selectedReportType, postFilter,pageSize,currentPage)\r\n  );\r\n  // *************\r\n  // *************\r\n  const {\r\n    data: {\r\n      data: newReportsDataa,\r\n      hasNextPage: newHasNextPage,\r\n      hasPreviousPage: newHasPreviousPage,\r\n      total: newTotal,\r\n      refetch: newReportsRefteh,\r\n    },\r\n  } = usePaginatedQuery([\"newReportssData\", , `${selectedReportType},${pageSize}`], () =>\r\n    getNewreports(token, selectedReportType, postFilter,pageSize,currentPage)\r\n  );\r\n\r\n  return {\r\n    reportTypeOptions,\r\n    retryFunc,\r\n    downloadFunc,\r\n    pastReportsDataa,\r\n    newReportsDataa,\r\n    newOldReportsData,\r\n    setNewOldReportsData,\r\n    isLoading,\r\n    reportTyperequestFunc,\r\n    pastHasNextPage,\r\n    pastTotal,\r\n    pastHasPreviousPage,\r\n    pastReportsRefteh,\r\n    newHasNextPage,\r\n    newHasPreviousPage,\r\n    newTotal,\r\n    newReportsRefteh,\r\n    pagelengthnum,\r\n    toggle,\r\n    isOpen,\r\n    pageSize,\r\n    currentPage,\r\n    changeCurrentPage,\r\n    pageOptions,\r\n    \r\n  };\r\n};\r\n\r\nexport default useReportRequest;\r\n"]},"metadata":{},"sourceType":"module"}