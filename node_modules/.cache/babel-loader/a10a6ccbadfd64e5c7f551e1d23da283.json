{"ast":null,"code":"import _objectSpread from\"C:/Users/tech sign/Desktop/diom(3)/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from\"axios\";import MockAdapter from\"axios-mock-adapter\";import*as url from\"../url_helper\";import{DIOM_BASED_URLS}from\"./../../config/url\";import{useSnackbar,withSnackbar}from\"notistack\";import{calenderDefaultCategories,events,orders,productsData,customerData,shops,cartData,comments,chats,groups,messages,contacts}from\"../../common/data\";var users=[// { id: 1, username: 'admin', password: '123456789Abc', email: 'humx7898@gmail.com' }\n{password:\"123456789Abc\",email:\"humx7898@gmail.com\",role:\"abc\",fullName:\"admin\"}];var fakeBackend=function fakeBackend(){// const { enqueueSnackbar } = useSnackbar();\n// This sets the mock adapter on the default instance\nvar mock=new MockAdapter(axios);mock.onPost(\"/post-register\").reply(function(config){var user=JSON.parse(config[\"data\"]);users.push(user);return new Promise(function(resolve,reject){setTimeout(function(){resolve([200,user]);});});});mock.onPost(\"/post-login\").reply(function(config){var user=JSON.parse(config[\"data\"]);// const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\n// return new Promise(function (resolve, reject) {\n//   setTimeout(function () {\n//     if (validUser['length'] === 1) {\n//       resolve([200, validUser[0]]);\n//     } else {\n//       reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n//     }\n//   });\n// });\nfetch(\"\".concat(DIOM_BASED_URLS,\"/diom/spaces/admin/login\"),{method:\"POST\",headers:{Accept:\"application/json, text/plain\",\"Content-Type\":\"application/json;charset=UTF-8\"},body:JSON.stringify({email:user.username,password:user.password,userDeviceToken:user.currentTokenOfUser})}).then(function(res){// if (!res.ok) {\n//   const resJson =  res.json();\n//   // throw new Error(resJson.error.message);\n//   throw new Error(\"Username and password are invalid. Please enter correct username and password\")\n// }\nres.json();}).then(function(data){// localStorage.setItem(\"Token\", data.token);\nconsole.info(\"datass\",data);return data;}).catch(function(err){return(// console.log(err)\n//   withSnackbar(err, { \n//     variant: 'success',\n// })\nalert(\"Username and password are invalid. Please enter correct username and password\"));});});mock.onPost(\"/forget-pwd\").reply(function(config){// User needs to check that user is eXist or not and send mail for Reset New password\nreturn new Promise(function(resolve,reject){setTimeout(function(){resolve([200,\"Check you mail and reset your password.\"]);});});});mock.onGet(url.GET_EVENTS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(events){// Passing fake JSON data as response\nresolve([200,events]);}else{reject([400,\"Cannot get events\"]);}});});});mock.onPost(url.ADD_NEW_EVENT).reply(function(event){return new Promise(function(resolve,reject){setTimeout(function(){if(event&&event.data){// Passing fake JSON data as response\nresolve([200,event.data]);}else{reject([400,\"Cannot add event\"]);}});});});mock.onPut(url.UPDATE_EVENT).reply(function(event){return new Promise(function(resolve,reject){setTimeout(function(){if(event&&event.data){// Passing fake JSON data as response\nresolve([200,event.data]);}else{reject([400,\"Cannot update event\"]);}});});});mock.onDelete(url.DELETE_EVENT).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config&&config.headers){// Passing fake JSON data as response\nresolve([200,config.headers.event]);}else{reject([400,\"Cannot delete event\"]);}});});});mock.onGet(url.GET_CATEGORIES).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(calenderDefaultCategories){// Passing fake JSON data as response\nresolve([200,calenderDefaultCategories]);}else{reject([400,\"Cannot get categories\"]);}});});});mock.onGet(url.GET_PRODUCTS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(productsData){// Passing fake JSON data as response\nresolve([200,productsData]);}else{reject([400,\"Cannot get products\"]);}});});});mock.onGet(new RegExp(\"\".concat(url.GET_PRODUCTS_DETAIL,\"/*\"))).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(productsData){// Passing fake JSON data as response\nvar params=config.params;var product=productsData.find(function(product){return product.id.toString()===params.id.toString();});resolve([200,_objectSpread(_objectSpread({},product),{},{comments:comments})]);}else{reject([400,\"Cannot get product detail\"]);}});});});mock.onGet(url.GET_ORDERS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(orders){// Passing fake JSON data as response\nresolve([200,orders]);}else{reject([400,\"Cannot get orders\"]);}});});});mock.onGet(url.GET_CART_DATA).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(cartData){// Passing fake JSON data as response\nresolve([200,cartData]);}else{reject([400,\"Cannot get cart data\"]);}});});});mock.onGet(url.GET_CUSTOMERS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(customerData){// Passing fake JSON data as response\nresolve([200,customerData]);}else{reject([400,\"Cannot get customers data\"]);}});});});mock.onGet(url.GET_SHOPS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(shops){// Passing fake JSON data as response\nresolve([200,shops]);}else{reject([400,\"Cannot get shops data\"]);}});});});mock.onGet(url.GET_CHATS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(chats){// Passing fake JSON data as response\nresolve([200,chats]);}else{reject([400,\"Cannot get chats\"]);}});});});mock.onGet(url.GET_GROUPS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(groups){// Passing fake JSON data as response\nresolve([200,groups]);}else{reject([400,\"Cannot get groups\"]);}});});});mock.onGet(url.GET_CONTACTS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(contacts){// Passing fake JSON data as response\nresolve([200,contacts]);}else{reject([400,\"Cannot get contacts\"]);}});});});mock.onGet(new RegExp(\"\".concat(url.GET_MESSAGES,\"/*\"))).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(messages){// Passing fake JSON data as response\nvar params=config.params;var filteredMessages=messages.filter(function(msg){return msg.roomId===params.roomId;});resolve([200,filteredMessages]);}else{reject([400,\"Cannot get messages\"]);}});});});mock.onPost(url.ADD_MESSAGE).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config.data){// Passing fake JSON data as response\nresolve([200,config.data]);}else{reject([400,\"Cannot add message\"]);}});});});};export default fakeBackend;","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/diom(3)/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","DIOM_BASED_URLS","useSnackbar","withSnackbar","calenderDefaultCategories","events","orders","productsData","customerData","shops","cartData","comments","chats","groups","messages","contacts","users","password","email","role","fullName","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","fetch","method","headers","Accept","body","stringify","username","userDeviceToken","currentTokenOfUser","then","res","json","data","console","info","catch","err","alert","onGet","GET_EVENTS","ADD_NEW_EVENT","event","onPut","UPDATE_EVENT","onDelete","DELETE_EVENT","GET_CATEGORIES","GET_PRODUCTS","RegExp","GET_PRODUCTS_DETAIL","params","product","find","id","toString","GET_ORDERS","GET_CART_DATA","GET_CUSTOMERS","GET_SHOPS","GET_CHATS","GET_GROUPS","GET_CONTACTS","GET_MESSAGES","filteredMessages","filter","msg","roomId","ADD_MESSAGE"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport MockAdapter from \"axios-mock-adapter\";\r\nimport * as url from \"../url_helper\";\r\nimport { DIOM_BASED_URLS } from \"./../../config/url\";\r\nimport {  useSnackbar,withSnackbar  } from \"notistack\";\r\nimport {\r\n  calenderDefaultCategories,\r\n  events,\r\n  orders,\r\n  productsData,\r\n  customerData,\r\n  shops,\r\n  cartData,\r\n  comments,\r\n  chats,\r\n  groups,\r\n  messages,\r\n  contacts,\r\n} from \"../../common/data\";\r\n\r\nlet users = [\r\n  // { id: 1, username: 'admin', password: '123456789Abc', email: 'humx7898@gmail.com' }\r\n  {\r\n    password: \"123456789Abc\",\r\n    email: \"humx7898@gmail.com\",\r\n    role: \"abc\",\r\n    fullName: \"admin\",\r\n  },\r\n];\r\n\r\nconst fakeBackend = () => {\r\n  // const { enqueueSnackbar } = useSnackbar();\r\n  // This sets the mock adapter on the default instance\r\n  var mock = new MockAdapter(axios);\r\n\r\n  mock.onPost(\"/post-register\").reply(function (config) {\r\n    const user = JSON.parse(config[\"data\"]);\r\n    users.push(user);\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, user]);\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(\"/post-login\").reply(function (config) {\r\n    const user = JSON.parse(config[\"data\"]);\r\n    // const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\r\n\r\n    // return new Promise(function (resolve, reject) {\r\n    //   setTimeout(function () {\r\n    //     if (validUser['length'] === 1) {\r\n    //       resolve([200, validUser[0]]);\r\n    //     } else {\r\n    //       reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\r\n    //     }\r\n    //   });\r\n    // });\r\n\r\n    fetch(`${DIOM_BASED_URLS}/diom/spaces/admin/login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: user.username,\r\n        password: user.password,\r\n        userDeviceToken: user.currentTokenOfUser,\r\n      }),\r\n    })\r\n    .then((res) => {\r\n      // if (!res.ok) {\r\n      //   const resJson =  res.json();\r\n      //   // throw new Error(resJson.error.message);\r\n      //   throw new Error(\"Username and password are invalid. Please enter correct username and password\")\r\n      // }\r\n      res.json()\r\n    })\r\n      .then((data) => {\r\n        // localStorage.setItem(\"Token\", data.token);\r\n        console.info(\"datass\", data);\r\n        return data;\r\n      })\r\n      .catch((err) => \r\n      // console.log(err)\r\n      \r\n    //   withSnackbar(err, { \r\n    //     variant: 'success',\r\n        \r\n    // })\r\n    alert(\"Username and password are invalid. Please enter correct username and password\")\r\n      \r\n      );\r\n  });\r\n\r\n  mock.onPost(\"/forget-pwd\").reply(function (config) {\r\n    // User needs to check that user is eXist or not and send mail for Reset New password\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, \"Check you mail and reset your password.\"]);\r\n      });\r\n    });\r\n  });\r\n  mock.onGet(url.GET_EVENTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (events) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, events]);\r\n        } else {\r\n          reject([400, \"Cannot get events\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(url.ADD_NEW_EVENT).reply((event) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data]);\r\n        } else {\r\n          reject([400, \"Cannot add event\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPut(url.UPDATE_EVENT).reply((event) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data]);\r\n        } else {\r\n          reject([400, \"Cannot update event\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onDelete(url.DELETE_EVENT).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (config && config.headers) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, config.headers.event]);\r\n        } else {\r\n          reject([400, \"Cannot delete event\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (calenderDefaultCategories) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, calenderDefaultCategories]);\r\n        } else {\r\n          reject([400, \"Cannot get categories\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (productsData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, productsData]);\r\n        } else {\r\n          reject([400, \"Cannot get products\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (productsData) {\r\n          // Passing fake JSON data as response\r\n          const { params } = config;\r\n          const product = productsData.find(\r\n            (product) => product.id.toString() === params.id.toString()\r\n          );\r\n          resolve([200, { ...product, comments }]);\r\n        } else {\r\n          reject([400, \"Cannot get product detail\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_ORDERS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (orders) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, orders]);\r\n        } else {\r\n          reject([400, \"Cannot get orders\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CART_DATA).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (cartData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, cartData]);\r\n        } else {\r\n          reject([400, \"Cannot get cart data\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (customerData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, customerData]);\r\n        } else {\r\n          reject([400, \"Cannot get customers data\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_SHOPS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (shops) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, shops]);\r\n        } else {\r\n          reject([400, \"Cannot get shops data\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CHATS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (chats) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, chats]);\r\n        } else {\r\n          reject([400, \"Cannot get chats\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_GROUPS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (groups) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, groups]);\r\n        } else {\r\n          reject([400, \"Cannot get groups\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CONTACTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (contacts) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, contacts]);\r\n        } else {\r\n          reject([400, \"Cannot get contacts\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (messages) {\r\n          // Passing fake JSON data as response\r\n          const { params } = config;\r\n          const filteredMessages = messages.filter(\r\n            (msg) => msg.roomId === params.roomId\r\n          );\r\n          resolve([200, filteredMessages]);\r\n        } else {\r\n          reject([400, \"Cannot get messages\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(url.ADD_MESSAGE).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (config.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, config.data]);\r\n        } else {\r\n          reject([400, \"Cannot add message\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nexport default fakeBackend;\r\n"]},"metadata":{},"sourceType":"module"}