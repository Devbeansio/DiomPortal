{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { DIOM_BASED_URLS } from \"../../../../config/url\";\nimport { useParams } from \"react-router-dom\";\nimport { getFloorPlansNames } from \"../../../../APIS/floorplans\";\nimport { useQuery } from \"react-query\";\n\nconst useFloorPlanDetail = () => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [modal_static, setModal_static] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState({});\n  const [selectLocationName, setSelectLocationName] = useState(\"\");\n  const [selectLocationNameById, setSelectLocationNameById] = useState(\"\");\n  const [selectLocationNamefloorname, setSelectLocationNamefloorname] = useState(\"\");\n  const [loaded, setLoaded] = useState(false);\n\n  const handleSelectGroup = selectedGroup => {\n    //  console.log(selectedGroup)\n    setSelectedLocation(selectedGroup);\n    setSelectLocationName(selectedGroup.label);\n  };\n\n  const {\n    floorid\n  } = useParams();\n  const history = useHistory();\n  const token = localStorage.getItem(\"Token\");\n\n  const formatBytes = function (bytes) {\n    let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  const handleAcceptedFiles = files => {\n    files.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file),\n      htmlFormattedSize: formatBytes(file.size)\n    }));\n    setSelectedFiles(files);\n  };\n\n  const namefunc = e => {\n    setSelectLocationNameById(prev => ({ ...prev,\n      Name: e.target.value\n    }));\n  };\n\n  const removeBodyCss = () => {\n    document.body.classList.add(\"no_padding\");\n  };\n\n  const tog_static = () => {\n    setModal_static(!modal_static);\n    removeBodyCss();\n  };\n\n  const uploadFile = () => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", `Bearer ${localStorage.getItem(\"Token\")}`);\n    var formdata = new FormData();\n    formdata.append(\"file\", selectedFiles[0], selectedFiles[0].name);\n    formdata.append(\"floorplanName\", selectLocationNameById.Name);\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: formdata,\n      redirect: \"follow\"\n    };\n    fetch(`${DIOM_BASED_URLS}/admin-business-locations/${selectedLocation.value}/floorpans`, requestOptions).then(response => response.json()).then(result => {\n      if (result[0].statusCode === 200) {\n        toast.success(\"Floorplans Added Succufully\");\n      } else if (result[0].statusCode === 204) {\n        toast.success(\"Floorplans Added Succufully\");\n      } else {\n        toast.error(\" Something went wrong\");\n      }\n\n      setModal_static(false);\n    }).catch(error => setError(error.message), toast.error(\" Something went wrong\"));\n  }; // *************\n\n\n  const floorPlanData = useQuery([\"floorplanname\", floorid], () => getFloorPlansNames(token, floorid));\n  const floorPlanNameData = floorPlanData.data; // *************\n\n  const getlocations = async () => {\n    setSelectLocationNameById(floorPlanNameData);\n    const floornames = floorPlanNameData.floorPlans.map(e => ({\n      _id: e._id,\n      imageUrl: e.imageUrl\n    }));\n    setSelectLocationNamefloorname(floornames);\n  };\n\n  useEffect(() => {\n    (async () => {\n      floorPlanNameData && (await getlocations());\n    })();\n  }, [floorPlanNameData]);\n  return {\n    error,\n    setError,\n    modal_static,\n    setModal_static,\n    selectedFiles,\n    setSelectedFiles,\n    selectedLocation,\n    setSelectedLocation,\n    selectLocationName,\n    setSelectLocationName,\n    selectLocationNameById,\n    setSelectLocationNameById,\n    selectLocationNamefloorname,\n    setSelectLocationNamefloorname,\n    loaded,\n    setLoaded,\n    handleSelectGroup,\n    handleAcceptedFiles,\n    namefunc,\n    uploadFile,\n    tog_static,\n    deleteFloorPlansFunc,\n    getlocations\n  };\n};\n\n_s(useFloorPlanDetail, \"uE2UGDZIPzX5baXmwXODxYr/ZvE=\", false, function () {\n  return [useParams, useHistory, useQuery];\n});\n\nexport default useFloorPlanDetail;","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/1diom-frontend/diom-frontend/src/pages/Inventories/FloorPlan/FloorPlanDetail/useFloorPlanDetail.js"],"names":["useState","useEffect","useHistory","toast","DIOM_BASED_URLS","useParams","getFloorPlansNames","useQuery","useFloorPlanDetail","error","setError","modal_static","setModal_static","selectedFiles","setSelectedFiles","selectedLocation","setSelectedLocation","selectLocationName","setSelectLocationName","selectLocationNameById","setSelectLocationNameById","selectLocationNamefloorname","setSelectLocationNamefloorname","loaded","setLoaded","handleSelectGroup","selectedGroup","label","floorid","history","token","localStorage","getItem","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","handleAcceptedFiles","files","map","file","Object","assign","preview","URL","createObjectURL","htmlFormattedSize","size","namefunc","e","prev","Name","target","value","removeBodyCss","document","body","classList","add","tog_static","uploadFile","myHeaders","Headers","append","formdata","FormData","name","requestOptions","method","headers","redirect","fetch","then","response","json","result","statusCode","success","catch","message","floorPlanData","floorPlanNameData","data","getlocations","floornames","floorPlans","_id","imageUrl","deleteFloorPlansFunc"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { DIOM_BASED_URLS } from \"../../../../config/url\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getFloorPlansNames } from \"../../../../APIS/floorplans\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nconst useFloorPlanDetail = () => {\r\n  const [error, setError] = useState(null);\r\n  const [modal_static, setModal_static] = useState(false);\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [selectedLocation, setSelectedLocation] = useState({});\r\n  const [selectLocationName, setSelectLocationName] = useState(\"\");\r\n  const [selectLocationNameById, setSelectLocationNameById] = useState(\"\");\r\n  const [selectLocationNamefloorname, setSelectLocationNamefloorname] =\r\n    useState(\"\");\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const handleSelectGroup = (selectedGroup) => {\r\n    //  console.log(selectedGroup)\r\n    setSelectedLocation(selectedGroup);\r\n    setSelectLocationName(selectedGroup.label);\r\n  };\r\n\r\n  const { floorid } = useParams();\r\n  const history = useHistory();\r\n  const token = localStorage.getItem(\"Token\");\r\n\r\n  const formatBytes = (bytes, decimals = 2) => {\r\n    if (bytes === 0) return \"0 Bytes\";\r\n    const k = 1024;\r\n    const dm = decimals < 0 ? 0 : decimals;\r\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\r\n  };\r\n  const handleAcceptedFiles = (files) => {\r\n    files.map((file) =>\r\n      Object.assign(file, {\r\n        preview: URL.createObjectURL(file),\r\n        htmlFormattedSize: formatBytes(file.size),\r\n      })\r\n    );\r\n\r\n    setSelectedFiles(files);\r\n  };\r\n\r\n  const namefunc = (e) => {\r\n    setSelectLocationNameById((prev) => ({\r\n      ...prev,\r\n      Name: e.target.value,\r\n    }));\r\n  };\r\n\r\n  const removeBodyCss = () => {\r\n    document.body.classList.add(\"no_padding\");\r\n  };\r\n  const tog_static = () => {\r\n    setModal_static(!modal_static);\r\n    removeBodyCss();\r\n  };\r\n\r\n  const uploadFile = () => {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\r\n      \"Authorization\",\r\n      `Bearer ${localStorage.getItem(\"Token\")}`\r\n    );\r\n\r\n    var formdata = new FormData();\r\n    formdata.append(\"file\", selectedFiles[0], selectedFiles[0].name);\r\n    formdata.append(\"floorplanName\", selectLocationNameById.Name);\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: formdata,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(\r\n      `${DIOM_BASED_URLS}/admin-business-locations/${selectedLocation.value}/floorpans`,\r\n      requestOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result[0].statusCode === 200) {\r\n          toast.success(\"Floorplans Added Succufully\");\r\n        } else if (result[0].statusCode === 204) {\r\n          toast.success(\"Floorplans Added Succufully\");\r\n        } else {\r\n          toast.error(\" Something went wrong\");\r\n        }\r\n        setModal_static(false);\r\n      })\r\n      .catch(\r\n        (error) => setError(error.message),\r\n        toast.error(\" Something went wrong\")\r\n      );\r\n  };\r\n\r\n  // *************\r\n  const floorPlanData = useQuery([\"floorplanname\", floorid], () =>\r\n    getFloorPlansNames(token, floorid)\r\n  );\r\n  const floorPlanNameData = floorPlanData.data;\r\n  // *************\r\n  const getlocations = async () => {\r\n    setSelectLocationNameById(floorPlanNameData);\r\n    const floornames = floorPlanNameData.floorPlans.map((e) => ({\r\n      _id: e._id,\r\n      imageUrl: e.imageUrl,\r\n    }));\r\n    setSelectLocationNamefloorname(floornames);\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      floorPlanNameData && (await getlocations());\r\n    })();\r\n  }, [floorPlanNameData]);\r\n\r\n  return {\r\n    error,\r\n    setError,\r\n    modal_static,\r\n    setModal_static,\r\n    selectedFiles,\r\n    setSelectedFiles,\r\n    selectedLocation,\r\n    setSelectedLocation,\r\n    selectLocationName,\r\n    setSelectLocationName,\r\n    selectLocationNameById,\r\n    setSelectLocationNameById,\r\n    selectLocationNamefloorname,\r\n    setSelectLocationNamefloorname,\r\n    loaded,\r\n    setLoaded,\r\n    handleSelectGroup,\r\n    handleAcceptedFiles,\r\n    namefunc,\r\n    uploadFile,\r\n    tog_static,\r\n    deleteFloorPlansFunc,\r\n    getlocations,\r\n  };\r\n};\r\n\r\nexport default useFloorPlanDetail;\r\n"]},"metadata":{},"sourceType":"module"}