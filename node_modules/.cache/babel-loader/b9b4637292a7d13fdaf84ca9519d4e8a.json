{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport { getInvoice } from \"../../../../APIS/invoices\";\nimport { usePaginatedQuery } from \"../../../../hooks/query\";\nimport { useParams } from \"react-router-dom\";\nexport const useInvoice = () => {\n  _s();\n\n  const token = localStorage.getItem(\"Token\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize] = useState(50);\n\n  const changeCurrentPage = pageNum => setCurrentPage(pageNum);\n\n  const queryClient = useQueryClient();\n  const {\n    id\n  } = useParams();\n  const {\n    data: {\n      data: InvoiceData,\n      hasNextPage,\n      hasPreviousPage,\n      total\n    },\n    isLoading\n  } = usePaginatedQuery([\"Invoice\", currentPage], () => getInvoice(pageSize, currentPage, token, id));\n  const pageOptions = {\n    sizePerPage: pageSize,\n    totalSize: total !== null && total !== void 0 ? total : 0,\n    custom: true\n  };\n  useEffect(() => {\n    // FOR PRE-FETCHING NEXT PAGE\n    if (hasNextPage) {\n      const nextPage = currentPage + 1;\n      queryClient.prefetchQuery([\"Invoice\", nextPage], () => getInvoice(pageSize, nextPage, token, id));\n    }\n  }, [currentPage, queryClient]);\n  return {\n    currentPage,\n    pageOptions,\n    InvoiceData,\n    hasNextPage,\n    hasPreviousPage,\n    total,\n    isLoading,\n    changeCurrentPage\n  };\n};\n\n_s(useInvoice, \"9zPRkmAJvXhFqXhDzcxclRB09Zc=\", false, function () {\n  return [useQueryClient, useParams, usePaginatedQuery];\n});","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/1diom-frontend/diom-frontend/src/pages/Finance/InvoicesMainPage/InvoicesDetailPage/useInvoicesDetail.js"],"names":["useEffect","useState","useQueryClient","getInvoice","usePaginatedQuery","useParams","useInvoice","token","localStorage","getItem","currentPage","setCurrentPage","pageSize","changeCurrentPage","pageNum","queryClient","id","data","InvoiceData","hasNextPage","hasPreviousPage","total","isLoading","pageOptions","sizePerPage","totalSize","custom","nextPage","prefetchQuery"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC9B,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACW,QAAD,IAAaX,QAAQ,CAAC,EAAD,CAA3B;;AACA,QAAMY,iBAAiB,GAAIC,OAAD,IAAaH,cAAc,CAACG,OAAD,CAArD;;AACA,QAAMC,WAAW,GAAGb,cAAc,EAAlC;AACA,QAAM;AAAEc,IAAAA;AAAF,MAASX,SAAS,EAAxB;AAEA,QAAM;AACJY,IAAAA,IAAI,EAAE;AAAEA,MAAAA,IAAI,EAAEC,WAAR;AAAqBC,MAAAA,WAArB;AAAkCC,MAAAA,eAAlC;AAAmDC,MAAAA;AAAnD,KADF;AAEJC,IAAAA;AAFI,MAGFlB,iBAAiB,CAAC,CAAC,SAAD,EAAYM,WAAZ,CAAD,EAA2B,MAC9CP,UAAU,CAACS,QAAD,EAAWF,WAAX,EAAwBH,KAAxB,EAA+BS,EAA/B,CADS,CAHrB;AAOA,QAAMO,WAAW,GAAG;AAClBC,IAAAA,WAAW,EAAEZ,QADK;AAElBa,IAAAA,SAAS,EAAEJ,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAW,CAFF;AAGlBK,IAAAA,MAAM,EAAE;AAHU,GAApB;AAMA1B,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAImB,WAAJ,EAAiB;AACf,YAAMQ,QAAQ,GAAGjB,WAAW,GAAG,CAA/B;AACAK,MAAAA,WAAW,CAACa,aAAZ,CAA0B,CAAC,SAAD,EAAYD,QAAZ,CAA1B,EAAiD,MAC/CxB,UAAU,CAACS,QAAD,EAAWe,QAAX,EAAqBpB,KAArB,EAA4BS,EAA5B,CADZ;AAGD;AACF,GARQ,EAQN,CAACN,WAAD,EAAcK,WAAd,CARM,CAAT;AAUA,SAAO;AACLL,IAAAA,WADK;AAELa,IAAAA,WAFK;AAGLL,IAAAA,WAHK;AAILC,IAAAA,WAJK;AAKLC,IAAAA,eALK;AAMLC,IAAAA,KANK;AAOLC,IAAAA,SAPK;AAQLT,IAAAA;AARK,GAAP;AAUD,CAzCM;;GAAMP,U;UAKSJ,c,EACLG,S,EAKXD,iB","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\nimport { getInvoice } from \"../../../../APIS/invoices\";\r\nimport { usePaginatedQuery } from \"../../../../hooks/query\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport const useInvoice = () => {\r\n  const token = localStorage.getItem(\"Token\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize] = useState(50);\r\n  const changeCurrentPage = (pageNum) => setCurrentPage(pageNum);\r\n  const queryClient = useQueryClient();\r\n  const { id } = useParams();\r\n\r\n  const {\r\n    data: { data: InvoiceData, hasNextPage, hasPreviousPage, total },\r\n    isLoading,\r\n  } = usePaginatedQuery([\"Invoice\", currentPage], () =>\r\n    getInvoice(pageSize, currentPage, token, id)\r\n  );\r\n\r\n  const pageOptions = {\r\n    sizePerPage: pageSize,\r\n    totalSize: total ?? 0,\r\n    custom: true,\r\n  };\r\n\r\n  useEffect(() => {\r\n    // FOR PRE-FETCHING NEXT PAGE\r\n    if (hasNextPage) {\r\n      const nextPage = currentPage + 1;\r\n      queryClient.prefetchQuery([\"Invoice\", nextPage], () =>\r\n        getInvoice(pageSize, nextPage, token, id)\r\n      );\r\n    }\r\n  }, [currentPage, queryClient]);\r\n\r\n  return {\r\n    currentPage,\r\n    pageOptions,\r\n    InvoiceData,\r\n    hasNextPage,\r\n    hasPreviousPage,\r\n    total,\r\n    isLoading,\r\n    changeCurrentPage,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}