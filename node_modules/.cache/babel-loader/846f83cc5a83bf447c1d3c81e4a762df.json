{"ast":null,"code":"import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport * as url from \"../url_helper\";\nimport { calenderDefaultCategories, events, orders, productsData, customerData, shops, cartData, comments, chats, groups, messages, contacts } from \"../../common/data\";\nlet users = [// { id: 1, username: 'admin', password: '123456789Abc', email: 'humx7898@gmail.com' }\n{\n  password: '123456789Abc',\n  email: 'humx7898@gmail.com',\n  role: 'abc',\n  fullName: 'admin'\n}];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  var mock = new MockAdapter(axios);\n  mock.onPost('/post-register').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    users.push(user);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost('/post-login').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser['length'] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost('/forget-pwd').reply(function (config) {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events]);\n        } else {\n          reject([400, \"Cannot get events\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot add event\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot update event\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event]);\n        } else {\n          reject([400, \"Cannot delete event\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories]);\n        } else {\n          reject([400, \"Cannot get categories\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          resolve([200, productsData]);\n        } else {\n          reject([400, \"Cannot get products\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const product = productsData.find(product => product.id.toString() === params.id.toString());\n          resolve([200, { ...product,\n            comments\n          }]);\n        } else {\n          reject([400, \"Cannot get product detail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (orders) {\n          // Passing fake JSON data as response\n          resolve([200, orders]);\n        } else {\n          reject([400, \"Cannot get orders\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CART_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cartData) {\n          // Passing fake JSON data as response\n          resolve([200, cartData]);\n        } else {\n          reject([400, \"Cannot get cart data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customerData) {\n          // Passing fake JSON data as response\n          resolve([200, customerData]);\n        } else {\n          reject([400, \"Cannot get customers data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_SHOPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shops) {\n          // Passing fake JSON data as response\n          resolve([200, shops]);\n        } else {\n          reject([400, \"Cannot get shops data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats]);\n        } else {\n          reject([400, \"Cannot get chats\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups]);\n        } else {\n          reject([400, \"Cannot get groups\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts]);\n        } else {\n          reject([400, \"Cannot get contacts\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const filteredMessages = messages.filter(msg => msg.roomId === params.roomId);\n          resolve([200, filteredMessages]);\n        } else {\n          reject([400, \"Cannot get messages\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data]);\n        } else {\n          reject([400, \"Cannot add message\"]);\n        }\n      });\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/1diom-frontend/diom-frontend/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","calenderDefaultCategories","events","orders","productsData","customerData","shops","cartData","comments","chats","groups","messages","contacts","users","password","email","role","fullName","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr","username","onGet","GET_EVENTS","ADD_NEW_EVENT","event","data","onPut","UPDATE_EVENT","onDelete","DELETE_EVENT","headers","GET_CATEGORIES","GET_PRODUCTS","RegExp","GET_PRODUCTS_DETAIL","params","product","find","id","toString","GET_ORDERS","GET_CART_DATA","GET_CUSTOMERS","GET_SHOPS","GET_CHATS","GET_GROUPS","GET_CONTACTS","GET_MESSAGES","filteredMessages","msg","roomId","ADD_MESSAGE"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport MockAdapter from 'axios-mock-adapter';\r\nimport * as url from \"../url_helper\";\r\n\r\nimport {\r\n  calenderDefaultCategories,\r\n  events,\r\n  orders,\r\n  productsData,\r\n  customerData,\r\n  shops,\r\n  cartData,\r\n  comments,\r\n  chats,\r\n  groups,\r\n  messages,\r\n  contacts\r\n} from \"../../common/data\";\r\n\r\nlet users = [\r\n  // { id: 1, username: 'admin', password: '123456789Abc', email: 'humx7898@gmail.com' }\r\n  { password: '123456789Abc', email: 'humx7898@gmail.com' ,role: 'abc', fullName: 'admin'}\r\n];\r\n\r\nconst fakeBackend = () => {\r\n  // This sets the mock adapter on the default instance\r\n  var mock = new MockAdapter(axios);\r\n\r\n  mock.onPost('/post-register').reply(function (config) {\r\n\r\n    const user = JSON.parse(config['data']);\r\n    users.push(user);\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, user]);\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost('/post-login').reply(function (config) {\r\n    const user = JSON.parse(config['data']);\r\n    const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        if (validUser['length'] === 1) {\r\n          resolve([200, validUser[0]]);\r\n        } else {\r\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost('/forget-pwd').reply(function (config) {\r\n    // User needs to check that user is eXist or not and send mail for Reset New password\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, \"Check you mail and reset your password.\"]);\r\n      });\r\n    });\r\n\r\n  });\r\n  mock.onGet(url.GET_EVENTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (events) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, events])\r\n        } else {\r\n          reject([400, \"Cannot get events\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data])\r\n        } else {\r\n          reject([400, \"Cannot add event\"])\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data])\r\n        } else {\r\n          reject([400, \"Cannot update event\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (config && config.headers) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, config.headers.event])\r\n        } else {\r\n          reject([400, \"Cannot delete event\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (calenderDefaultCategories) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, calenderDefaultCategories])\r\n        } else {\r\n          reject([400, \"Cannot get categories\"])\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n\r\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (productsData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, productsData])\r\n        } else {\r\n          reject([400, \"Cannot get products\"])\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (productsData) {\r\n          // Passing fake JSON data as response\r\n          const { params } = config\r\n          const product = productsData.find(\r\n            product => product.id.toString() === params.id.toString()\r\n          )\r\n          resolve([200, { ...product, comments }])\r\n        } else {\r\n          reject([400, \"Cannot get product detail\"])\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n  mock.onGet(url.GET_ORDERS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (orders) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, orders])\r\n        } else {\r\n          reject([400, \"Cannot get orders\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n    mock.onGet(url.GET_CART_DATA).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (cartData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, cartData])\r\n        } else {\r\n          reject([400, \"Cannot get cart data\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (customerData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, customerData])\r\n        } else {\r\n          reject([400, \"Cannot get customers data\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_SHOPS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (shops) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, shops])\r\n        } else {\r\n          reject([400, \"Cannot get shops data\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_CHATS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (chats) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, chats])\r\n        } else {\r\n          reject([400, \"Cannot get chats\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_GROUPS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (groups) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, groups])\r\n        } else {\r\n          reject([400, \"Cannot get groups\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_CONTACTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (contacts) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, contacts])\r\n        } else {\r\n          reject([400, \"Cannot get contacts\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (messages) {\r\n          // Passing fake JSON data as response\r\n          const { params } = config\r\n          const filteredMessages = messages.filter(\r\n            msg => msg.roomId === params.roomId\r\n          )\r\n          resolve([200, filteredMessages])\r\n        } else {\r\n          reject([400, \"Cannot get messages\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (config.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, config.data])\r\n        } else {\r\n          reject([400, \"Cannot add message\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n}\r\n\r\nexport default fakeBackend;"]},"metadata":{},"sourceType":"module"}