{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport { usePaginatedQuery } from \"../../hooks/query\";\nimport { getNewreports, getPastreports } from \"../../APIS/reports\";\nimport { QueryClient } from \"react-query\";\nimport { DIOM_BASED_URLS } from \"../../config/url\";\nimport { toast } from \"react-toastify\";\n\nconst useReportRequest = () => {\n  _s();\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const token = localStorage.getItem(\"Token\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [newOldReportsData, setNewOldReportsData] = useState([]);\n  const queryClient = new QueryClient();\n  const [postFilter, setPostFilter] = useState(false);\n  const [selectedReportType, setSelectedReportType] = useState(\"USER_REPORTS\");\n  const reportTypeOptions = [{\n    label: \"Booking Report\",\n    value: \"BOOKING_REPORTS\"\n  }, {\n    label: \"User Report\",\n    value: \"USER_REPORTS\"\n  }, {\n    label: \"User Ananlysis Report\",\n    value: \"USER_ANALYSIS_REPORTS\"\n  }, {\n    label: \"Cancelled Bookings\",\n    value: \"CANCELLED_BOOKINGS_REPORTS\"\n  }];\n\n  const retryFunc = () => {\n    const message = \"Gathering Report Data\";\n    enqueueSnackbar(message, {\n      variant: \"success\"\n    });\n  };\n\n  const pagelengthnum = e => {\n    if (e.target.value === \"1\") {\n      setPageSize(10);\n    } else if (e.target.value === \"2\") {\n      setPageSize(30);\n    } else if (e.target.value === \"3\") {\n      setPageSize(50);\n    }\n  };\n\n  const downloadFunc = rowId => {\n    const message1 = \"Your Report has started  to download\";\n    enqueueSnackbar(message1, {\n      variant: \"success\"\n    });\n    fetch(`${DIOM_BASED_URLS}/reports/commands`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json, text/plain\",\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n        Authorization: \"Bearer \" + token\n      },\n      body: JSON.stringify({\n        id: `${rowId}`,\n        command: \"MARK_READ\"\n      })\n    }).then(result3 => {}).catch(error => toast.error(\" Something went wrong\"));\n  };\n\n  const reportTyperequestFunc = e => {\n    setPostFilter(true);\n    setSelectedReportType(e.value);\n  }; // *************\n\n\n  const {\n    data: {\n      data: pastReportsDataa,\n      hasNextPage: pastHasNextPage,\n      hasPreviousPage: pastHasPreviousPage,\n      total: pastTotal,\n      refetch: pastReportsRefteh\n    },\n    isLoading\n  } = usePaginatedQuery([\"pastReprtssData\", `${selectedReportType}`], () => getPastreports(token, selectedReportType, postFilter)); // *************\n  // *************\n\n  const {\n    data: {\n      data: newReportsDataa,\n      hasNextPage: newHasNextPage,\n      hasPreviousPage: newHasPreviousPage,\n      total: newTotal,\n      refetch: newReportsRefteh\n    }\n  } = usePaginatedQuery([\"newReportssData\",, `${selectedReportType}`], () => getNewreports(token, selectedReportType, postFilter));\n  console.log(\"pastHasNextPage : \", pastTotal);\n  return {\n    reportTypeOptions,\n    retryFunc,\n    downloadFunc,\n    pastReportsDataa,\n    newReportsDataa,\n    newOldReportsData,\n    setNewOldReportsData,\n    isLoading,\n    reportTyperequestFunc,\n    pastHasNextPage,\n    pastTotal,\n    pastHasPreviousPage,\n    pastReportsRefteh,\n    newHasNextPage,\n    newHasPreviousPage,\n    newTotal,\n    newReportsRefteh,\n    pagelengthnum\n  };\n};\n\n_s(useReportRequest, \"j28qRZ825Z62XWXzsuYpu5h0KsI=\", false, function () {\n  return [useSnackbar, usePaginatedQuery, usePaginatedQuery];\n});\n\nexport default useReportRequest;","map":{"version":3,"sources":["D:/diom working project/staging/src/pages/Reports/useReportRequest.js"],"names":["React","useState","useEffect","useSnackbar","usePaginatedQuery","getNewreports","getPastreports","QueryClient","DIOM_BASED_URLS","toast","useReportRequest","enqueueSnackbar","token","localStorage","getItem","currentPage","setCurrentPage","newOldReportsData","setNewOldReportsData","queryClient","postFilter","setPostFilter","selectedReportType","setSelectedReportType","reportTypeOptions","label","value","retryFunc","message","variant","pagelengthnum","e","target","setPageSize","downloadFunc","rowId","message1","fetch","method","headers","Accept","Authorization","body","JSON","stringify","id","command","then","result3","catch","error","reportTyperequestFunc","data","pastReportsDataa","hasNextPage","pastHasNextPage","hasPreviousPage","pastHasPreviousPage","total","pastTotal","refetch","pastReportsRefteh","isLoading","newReportsDataa","newHasNextPage","newHasPreviousPage","newTotal","newReportsRefteh","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { usePaginatedQuery } from \"../../hooks/query\";\r\nimport { getNewreports, getPastreports } from \"../../APIS/reports\";\r\nimport { QueryClient } from \"react-query\";\r\nimport { DIOM_BASED_URLS } from \"../../config/url\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useReportRequest = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const token = localStorage.getItem(\"Token\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [newOldReportsData, setNewOldReportsData] = useState([]);\r\n  const queryClient = new QueryClient();\r\n  const [postFilter, setPostFilter] = useState(false);\r\n  const [selectedReportType, setSelectedReportType] = useState(\"USER_REPORTS\");\r\n  const reportTypeOptions = [\r\n    { label: \"Booking Report\", value: \"BOOKING_REPORTS\" },\r\n    { label: \"User Report\", value: \"USER_REPORTS\" },\r\n    { label: \"User Ananlysis Report\", value: \"USER_ANALYSIS_REPORTS\" },\r\n    { label: \"Cancelled Bookings\", value: \"CANCELLED_BOOKINGS_REPORTS\" },\r\n  ];\r\n\r\n  const retryFunc = () => {\r\n    const message = \"Gathering Report Data\";\r\n    enqueueSnackbar(message, {\r\n      variant: \"success\",\r\n    });\r\n  };\r\n\r\n  const pagelengthnum = (e) => {\r\n    if (e.target.value === \"1\") {\r\n      setPageSize(10);\r\n    } else if (e.target.value === \"2\") {\r\n      setPageSize(30);\r\n    } else if (e.target.value === \"3\") {\r\n      setPageSize(50);\r\n    }\r\n  };\r\n\r\n  const downloadFunc = (rowId) => {\r\n    const message1 = \"Your Report has started  to download\";\r\n    enqueueSnackbar(message1, {\r\n      variant: \"success\",\r\n    });\r\n    fetch(`${DIOM_BASED_URLS}/reports/commands`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n      body: JSON.stringify({\r\n        id: `${rowId}`,\r\n        command: \"MARK_READ\",\r\n      }),\r\n    })\r\n      .then((result3) => {})\r\n      .catch((error) => toast.error(\" Something went wrong\"));\r\n  };\r\n\r\n  const reportTyperequestFunc = (e) => {\r\n    setPostFilter(true);\r\n    setSelectedReportType(e.value);\r\n  };\r\n\r\n  // *************\r\n\r\n  const {\r\n    data: {\r\n      data: pastReportsDataa,\r\n      hasNextPage: pastHasNextPage,\r\n      hasPreviousPage: pastHasPreviousPage,\r\n      total: pastTotal,\r\n      refetch: pastReportsRefteh,\r\n    },\r\n    isLoading,\r\n  } = usePaginatedQuery([\"pastReprtssData\", `${selectedReportType}`], () =>\r\n    getPastreports(token, selectedReportType, postFilter)\r\n  );\r\n  // *************\r\n  // *************\r\n  const {\r\n    data: {\r\n      data: newReportsDataa,\r\n      hasNextPage: newHasNextPage,\r\n      hasPreviousPage: newHasPreviousPage,\r\n      total: newTotal,\r\n      refetch: newReportsRefteh,\r\n    },\r\n  } = usePaginatedQuery([\"newReportssData\", , `${selectedReportType}`], () =>\r\n    getNewreports(token, selectedReportType, postFilter)\r\n  );\r\n  console.log(\"pastHasNextPage : \", pastTotal);\r\n  return {\r\n    reportTypeOptions,\r\n    retryFunc,\r\n    downloadFunc,\r\n    pastReportsDataa,\r\n    newReportsDataa,\r\n    newOldReportsData,\r\n    setNewOldReportsData,\r\n    isLoading,\r\n    reportTyperequestFunc,\r\n    pastHasNextPage,\r\n    pastTotal,\r\n    pastHasPreviousPage,\r\n    pastReportsRefteh,\r\n    newHasNextPage,\r\n    newHasPreviousPage,\r\n    newTotal,\r\n    newReportsRefteh,\r\n    pagelengthnum,\r\n  };\r\n};\r\n\r\nexport default useReportRequest;\r\n"]},"metadata":{},"sourceType":"module"}