{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../url_helper\";\nimport { DIOM_BASED_URLS } from \"./../../config/url\";\nimport { useSnackbar, withSnackbar } from \"notistack\";\nimport { calenderDefaultCategories, events, orders, productsData, customerData, shops, cartData, comments, chats, groups, messages, contacts } from \"../../common/data\";\nlet users = [// { id: 1, username: 'admin', password: '123456789Abc', email: 'humx7898@gmail.com' }\n{\n  password: \"123456789Abc\",\n  email: \"humx7898@gmail.com\",\n  role: \"abc\",\n  fullName: \"admin\"\n}];\n\nconst fakeBackend = () => {\n  // const { enqueueSnackbar } = useSnackbar();\n  // This sets the mock adapter on the default instance\n  var mock = new MockAdapter(axios);\n  mock.onPost(\"/post-register\").reply(function (config) {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-login\").reply(function (config) {\n    const user = JSON.parse(config[\"data\"]); // const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\n    // return new Promise(function (resolve, reject) {\n    //   setTimeout(function () {\n    //     if (validUser['length'] === 1) {\n    //       resolve([200, validUser[0]]);\n    //     } else {\n    //       reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n    //     }\n    //   });\n    // });\n\n    fetch(`${DIOM_BASED_URLS}/diom/spaces/admin/login`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json, text/plain\",\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n      },\n      body: JSON.stringify({\n        email: user.username,\n        password: user.password,\n        userDeviceToken: user.currentTokenOfUser\n      })\n    }).then(res => {\n      // if (!res.ok) {\n      //   const resJson =  res.json();\n      //   // throw new Error(resJson.error.message);\n      //   throw new Error(\"Username and password are invalid. Please enter correct username and password\")\n      // }\n      res.json();\n    }).then(data => {\n      // localStorage.setItem(\"Token\", data.token);\n      console.info(\"datass\", data);\n      return data;\n    }).catch(err => // console.log(err)\n    //   withSnackbar(err, { \n    //     variant: 'success',\n    // })\n    alert(\"Username and password are invalid. Please enter correct username and password\"));\n  });\n  mock.onPost(\"/forget-pwd\").reply(function (config) {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events]);\n        } else {\n          reject([400, \"Cannot get events\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot add event\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot update event\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event]);\n        } else {\n          reject([400, \"Cannot delete event\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories]);\n        } else {\n          reject([400, \"Cannot get categories\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          resolve([200, productsData]);\n        } else {\n          reject([400, \"Cannot get products\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const product = productsData.find(product => product.id.toString() === params.id.toString());\n          resolve([200, { ...product,\n            comments\n          }]);\n        } else {\n          reject([400, \"Cannot get product detail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (orders) {\n          // Passing fake JSON data as response\n          resolve([200, orders]);\n        } else {\n          reject([400, \"Cannot get orders\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CART_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cartData) {\n          // Passing fake JSON data as response\n          resolve([200, cartData]);\n        } else {\n          reject([400, \"Cannot get cart data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customerData) {\n          // Passing fake JSON data as response\n          resolve([200, customerData]);\n        } else {\n          reject([400, \"Cannot get customers data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_SHOPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shops) {\n          // Passing fake JSON data as response\n          resolve([200, shops]);\n        } else {\n          reject([400, \"Cannot get shops data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats]);\n        } else {\n          reject([400, \"Cannot get chats\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups]);\n        } else {\n          reject([400, \"Cannot get groups\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts]);\n        } else {\n          reject([400, \"Cannot get contacts\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const filteredMessages = messages.filter(msg => msg.roomId === params.roomId);\n          resolve([200, filteredMessages]);\n        } else {\n          reject([400, \"Cannot get messages\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data]);\n        } else {\n          reject([400, \"Cannot add message\"]);\n        }\n      });\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/diom(3)/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","DIOM_BASED_URLS","useSnackbar","withSnackbar","calenderDefaultCategories","events","orders","productsData","customerData","shops","cartData","comments","chats","groups","messages","contacts","users","password","email","role","fullName","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","fetch","method","headers","Accept","body","stringify","username","userDeviceToken","currentTokenOfUser","then","res","json","data","console","info","catch","err","alert","onGet","GET_EVENTS","ADD_NEW_EVENT","event","onPut","UPDATE_EVENT","onDelete","DELETE_EVENT","GET_CATEGORIES","GET_PRODUCTS","RegExp","GET_PRODUCTS_DETAIL","params","product","find","id","toString","GET_ORDERS","GET_CART_DATA","GET_CUSTOMERS","GET_SHOPS","GET_CHATS","GET_GROUPS","GET_CONTACTS","GET_MESSAGES","filteredMessages","filter","msg","roomId","ADD_MESSAGE"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport MockAdapter from \"axios-mock-adapter\";\r\nimport * as url from \"../url_helper\";\r\nimport { DIOM_BASED_URLS } from \"./../../config/url\";\r\nimport {  useSnackbar,withSnackbar  } from \"notistack\";\r\nimport {\r\n  calenderDefaultCategories,\r\n  events,\r\n  orders,\r\n  productsData,\r\n  customerData,\r\n  shops,\r\n  cartData,\r\n  comments,\r\n  chats,\r\n  groups,\r\n  messages,\r\n  contacts,\r\n} from \"../../common/data\";\r\n\r\nlet users = [\r\n  // { id: 1, username: 'admin', password: '123456789Abc', email: 'humx7898@gmail.com' }\r\n  {\r\n    password: \"123456789Abc\",\r\n    email: \"humx7898@gmail.com\",\r\n    role: \"abc\",\r\n    fullName: \"admin\",\r\n  },\r\n];\r\n\r\nconst fakeBackend = () => {\r\n  // const { enqueueSnackbar } = useSnackbar();\r\n  // This sets the mock adapter on the default instance\r\n  var mock = new MockAdapter(axios);\r\n\r\n  mock.onPost(\"/post-register\").reply(function (config) {\r\n    const user = JSON.parse(config[\"data\"]);\r\n    users.push(user);\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, user]);\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(\"/post-login\").reply(function (config) {\r\n    const user = JSON.parse(config[\"data\"]);\r\n    // const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\r\n\r\n    // return new Promise(function (resolve, reject) {\r\n    //   setTimeout(function () {\r\n    //     if (validUser['length'] === 1) {\r\n    //       resolve([200, validUser[0]]);\r\n    //     } else {\r\n    //       reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\r\n    //     }\r\n    //   });\r\n    // });\r\n\r\n    fetch(`${DIOM_BASED_URLS}/diom/spaces/admin/login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: user.username,\r\n        password: user.password,\r\n        userDeviceToken: user.currentTokenOfUser,\r\n      }),\r\n    })\r\n    .then((res) => {\r\n      // if (!res.ok) {\r\n      //   const resJson =  res.json();\r\n      //   // throw new Error(resJson.error.message);\r\n      //   throw new Error(\"Username and password are invalid. Please enter correct username and password\")\r\n      // }\r\n      res.json()\r\n    })\r\n      .then((data) => {\r\n        // localStorage.setItem(\"Token\", data.token);\r\n        console.info(\"datass\", data);\r\n        return data;\r\n      })\r\n      .catch((err) => \r\n      // console.log(err)\r\n      \r\n    //   withSnackbar(err, { \r\n    //     variant: 'success',\r\n        \r\n    // })\r\n    alert(\"Username and password are invalid. Please enter correct username and password\")\r\n      \r\n      );\r\n  });\r\n\r\n  mock.onPost(\"/forget-pwd\").reply(function (config) {\r\n    // User needs to check that user is eXist or not and send mail for Reset New password\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, \"Check you mail and reset your password.\"]);\r\n      });\r\n    });\r\n  });\r\n  mock.onGet(url.GET_EVENTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (events) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, events]);\r\n        } else {\r\n          reject([400, \"Cannot get events\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(url.ADD_NEW_EVENT).reply((event) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data]);\r\n        } else {\r\n          reject([400, \"Cannot add event\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPut(url.UPDATE_EVENT).reply((event) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data]);\r\n        } else {\r\n          reject([400, \"Cannot update event\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onDelete(url.DELETE_EVENT).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (config && config.headers) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, config.headers.event]);\r\n        } else {\r\n          reject([400, \"Cannot delete event\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (calenderDefaultCategories) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, calenderDefaultCategories]);\r\n        } else {\r\n          reject([400, \"Cannot get categories\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (productsData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, productsData]);\r\n        } else {\r\n          reject([400, \"Cannot get products\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (productsData) {\r\n          // Passing fake JSON data as response\r\n          const { params } = config;\r\n          const product = productsData.find(\r\n            (product) => product.id.toString() === params.id.toString()\r\n          );\r\n          resolve([200, { ...product, comments }]);\r\n        } else {\r\n          reject([400, \"Cannot get product detail\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_ORDERS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (orders) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, orders]);\r\n        } else {\r\n          reject([400, \"Cannot get orders\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CART_DATA).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (cartData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, cartData]);\r\n        } else {\r\n          reject([400, \"Cannot get cart data\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (customerData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, customerData]);\r\n        } else {\r\n          reject([400, \"Cannot get customers data\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_SHOPS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (shops) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, shops]);\r\n        } else {\r\n          reject([400, \"Cannot get shops data\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CHATS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (chats) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, chats]);\r\n        } else {\r\n          reject([400, \"Cannot get chats\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_GROUPS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (groups) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, groups]);\r\n        } else {\r\n          reject([400, \"Cannot get groups\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(url.GET_CONTACTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (contacts) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, contacts]);\r\n        } else {\r\n          reject([400, \"Cannot get contacts\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (messages) {\r\n          // Passing fake JSON data as response\r\n          const { params } = config;\r\n          const filteredMessages = messages.filter(\r\n            (msg) => msg.roomId === params.roomId\r\n          );\r\n          resolve([200, filteredMessages]);\r\n        } else {\r\n          reject([400, \"Cannot get messages\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(url.ADD_MESSAGE).reply((config) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (config.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, config.data]);\r\n        } else {\r\n          reject([400, \"Cannot add message\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nexport default fakeBackend;\r\n"]},"metadata":{},"sourceType":"module"}