{"ast":null,"code":"import _objectSpread from\"C:/Users/tech sign/Desktop/1diom-frontend/diom-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';import MockAdapter from'axios-mock-adapter';import*as url from\"../url_helper\";import{calenderDefaultCategories,events,orders,productsData,customerData,shops,cartData,comments,chats,groups,messages,contacts}from\"../../common/data\";var users=[// { id: 1, username: 'admin', password: '123456789Abc', email: 'humx7898@gmail.com' }\n{password:'123456789Abc',email:'humx7898@gmail.com',role:'abc',fullName:'admin'}];var fakeBackend=function fakeBackend(){// This sets the mock adapter on the default instance\nvar mock=new MockAdapter(axios);mock.onPost('/post-register').reply(function(config){var user=JSON.parse(config['data']);users.push(user);return new Promise(function(resolve,reject){setTimeout(function(){resolve([200,user]);});});});mock.onPost('/post-login').reply(function(config){var user=JSON.parse(config['data']);var validUser=users.filter(function(usr){return usr.email===user.username&&usr.password===user.password;});return new Promise(function(resolve,reject){setTimeout(function(){if(validUser['length']===1){resolve([200,validUser[0]]);}else{reject([400,\"Username and password are invalid. Please enter correct username and password\"]);}});});});mock.onPost('/forget-pwd').reply(function(config){// User needs to check that user is eXist or not and send mail for Reset New password\nreturn new Promise(function(resolve,reject){setTimeout(function(){resolve([200,\"Check you mail and reset your password.\"]);});});});mock.onGet(url.GET_EVENTS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(events){// Passing fake JSON data as response\nresolve([200,events]);}else{reject([400,\"Cannot get events\"]);}});});});mock.onPost(url.ADD_NEW_EVENT).reply(function(event){return new Promise(function(resolve,reject){setTimeout(function(){if(event&&event.data){// Passing fake JSON data as response\nresolve([200,event.data]);}else{reject([400,\"Cannot add event\"]);}});});});mock.onPut(url.UPDATE_EVENT).reply(function(event){return new Promise(function(resolve,reject){setTimeout(function(){if(event&&event.data){// Passing fake JSON data as response\nresolve([200,event.data]);}else{reject([400,\"Cannot update event\"]);}});});});mock.onDelete(url.DELETE_EVENT).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config&&config.headers){// Passing fake JSON data as response\nresolve([200,config.headers.event]);}else{reject([400,\"Cannot delete event\"]);}});});});mock.onGet(url.GET_CATEGORIES).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(calenderDefaultCategories){// Passing fake JSON data as response\nresolve([200,calenderDefaultCategories]);}else{reject([400,\"Cannot get categories\"]);}});});});mock.onGet(url.GET_PRODUCTS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(productsData){// Passing fake JSON data as response\nresolve([200,productsData]);}else{reject([400,\"Cannot get products\"]);}});});});mock.onGet(new RegExp(\"\".concat(url.GET_PRODUCTS_DETAIL,\"/*\"))).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(productsData){// Passing fake JSON data as response\nvar params=config.params;var product=productsData.find(function(product){return product.id.toString()===params.id.toString();});resolve([200,_objectSpread(_objectSpread({},product),{},{comments:comments})]);}else{reject([400,\"Cannot get product detail\"]);}});});});mock.onGet(url.GET_ORDERS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(orders){// Passing fake JSON data as response\nresolve([200,orders]);}else{reject([400,\"Cannot get orders\"]);}});});});mock.onGet(url.GET_CART_DATA).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(cartData){// Passing fake JSON data as response\nresolve([200,cartData]);}else{reject([400,\"Cannot get cart data\"]);}});});});mock.onGet(url.GET_CUSTOMERS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(customerData){// Passing fake JSON data as response\nresolve([200,customerData]);}else{reject([400,\"Cannot get customers data\"]);}});});});mock.onGet(url.GET_SHOPS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(shops){// Passing fake JSON data as response\nresolve([200,shops]);}else{reject([400,\"Cannot get shops data\"]);}});});});mock.onGet(url.GET_CHATS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(chats){// Passing fake JSON data as response\nresolve([200,chats]);}else{reject([400,\"Cannot get chats\"]);}});});});mock.onGet(url.GET_GROUPS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(groups){// Passing fake JSON data as response\nresolve([200,groups]);}else{reject([400,\"Cannot get groups\"]);}});});});mock.onGet(url.GET_CONTACTS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(contacts){// Passing fake JSON data as response\nresolve([200,contacts]);}else{reject([400,\"Cannot get contacts\"]);}});});});mock.onGet(new RegExp(\"\".concat(url.GET_MESSAGES,\"/*\"))).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(messages){// Passing fake JSON data as response\nvar params=config.params;var filteredMessages=messages.filter(function(msg){return msg.roomId===params.roomId;});resolve([200,filteredMessages]);}else{reject([400,\"Cannot get messages\"]);}});});});mock.onPost(url.ADD_MESSAGE).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config.data){// Passing fake JSON data as response\nresolve([200,config.data]);}else{reject([400,\"Cannot add message\"]);}});});});};export default fakeBackend;","map":{"version":3,"sources":["C:/Users/tech sign/Desktop/1diom-frontend/diom-frontend/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","calenderDefaultCategories","events","orders","productsData","customerData","shops","cartData","comments","chats","groups","messages","contacts","users","password","email","role","fullName","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr","username","onGet","GET_EVENTS","ADD_NEW_EVENT","event","data","onPut","UPDATE_EVENT","onDelete","DELETE_EVENT","headers","GET_CATEGORIES","GET_PRODUCTS","RegExp","GET_PRODUCTS_DETAIL","params","product","find","id","toString","GET_ORDERS","GET_CART_DATA","GET_CUSTOMERS","GET_SHOPS","GET_CHATS","GET_GROUPS","GET_CONTACTS","GET_MESSAGES","filteredMessages","msg","roomId","ADD_MESSAGE"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport MockAdapter from 'axios-mock-adapter';\r\nimport * as url from \"../url_helper\";\r\n\r\nimport {\r\n  calenderDefaultCategories,\r\n  events,\r\n  orders,\r\n  productsData,\r\n  customerData,\r\n  shops,\r\n  cartData,\r\n  comments,\r\n  chats,\r\n  groups,\r\n  messages,\r\n  contacts\r\n} from \"../../common/data\";\r\n\r\nlet users = [\r\n  // { id: 1, username: 'admin', password: '123456789Abc', email: 'humx7898@gmail.com' }\r\n  { password: '123456789Abc', email: 'humx7898@gmail.com' ,role: 'abc', fullName: 'admin'}\r\n];\r\n\r\nconst fakeBackend = () => {\r\n  // This sets the mock adapter on the default instance\r\n  var mock = new MockAdapter(axios);\r\n\r\n  mock.onPost('/post-register').reply(function (config) {\r\n\r\n    const user = JSON.parse(config['data']);\r\n    users.push(user);\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, user]);\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost('/post-login').reply(function (config) {\r\n    const user = JSON.parse(config['data']);\r\n    const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        if (validUser['length'] === 1) {\r\n          resolve([200, validUser[0]]);\r\n        } else {\r\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost('/forget-pwd').reply(function (config) {\r\n    // User needs to check that user is eXist or not and send mail for Reset New password\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, \"Check you mail and reset your password.\"]);\r\n      });\r\n    });\r\n\r\n  });\r\n  mock.onGet(url.GET_EVENTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (events) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, events])\r\n        } else {\r\n          reject([400, \"Cannot get events\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data])\r\n        } else {\r\n          reject([400, \"Cannot add event\"])\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (event && event.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, event.data])\r\n        } else {\r\n          reject([400, \"Cannot update event\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (config && config.headers) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, config.headers.event])\r\n        } else {\r\n          reject([400, \"Cannot delete event\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (calenderDefaultCategories) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, calenderDefaultCategories])\r\n        } else {\r\n          reject([400, \"Cannot get categories\"])\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n\r\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (productsData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, productsData])\r\n        } else {\r\n          reject([400, \"Cannot get products\"])\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (productsData) {\r\n          // Passing fake JSON data as response\r\n          const { params } = config\r\n          const product = productsData.find(\r\n            product => product.id.toString() === params.id.toString()\r\n          )\r\n          resolve([200, { ...product, comments }])\r\n        } else {\r\n          reject([400, \"Cannot get product detail\"])\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n  mock.onGet(url.GET_ORDERS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (orders) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, orders])\r\n        } else {\r\n          reject([400, \"Cannot get orders\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n    mock.onGet(url.GET_CART_DATA).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (cartData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, cartData])\r\n        } else {\r\n          reject([400, \"Cannot get cart data\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (customerData) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, customerData])\r\n        } else {\r\n          reject([400, \"Cannot get customers data\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_SHOPS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (shops) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, shops])\r\n        } else {\r\n          reject([400, \"Cannot get shops data\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_CHATS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (chats) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, chats])\r\n        } else {\r\n          reject([400, \"Cannot get chats\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_GROUPS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (groups) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, groups])\r\n        } else {\r\n          reject([400, \"Cannot get groups\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(url.GET_CONTACTS).reply(() => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (contacts) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, contacts])\r\n        } else {\r\n          reject([400, \"Cannot get contacts\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (messages) {\r\n          // Passing fake JSON data as response\r\n          const { params } = config\r\n          const filteredMessages = messages.filter(\r\n            msg => msg.roomId === params.roomId\r\n          )\r\n          resolve([200, filteredMessages])\r\n        } else {\r\n          reject([400, \"Cannot get messages\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (config.data) {\r\n          // Passing fake JSON data as response\r\n          resolve([200, config.data])\r\n        } else {\r\n          reject([400, \"Cannot add message\"])\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n}\r\n\r\nexport default fakeBackend;"]},"metadata":{},"sourceType":"module"}