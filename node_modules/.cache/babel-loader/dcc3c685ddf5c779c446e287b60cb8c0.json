{"ast":null,"code":"import { GET_GROUPS_SUCCESS, GET_CHATS_SUCCESS, GET_GROUPS_FAIL, GET_CHATS_FAIL, GET_CONTACTS_SUCCESS, GET_CONTACTS_FAIL, GET_MESSAGES_SUCCESS, GET_MESSAGES_FAIL, POST_ADD_MESSAGE_SUCCESS, POST_ADD_MESSAGE_FAIL } from \"./actionTypes\";\nconst INIT_STATE = {\n  chats: [],\n  groups: [],\n  contacts: [],\n  messages: [],\n  error: {}\n};\n\nconst Calendar = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_CHATS_SUCCESS:\n      return { ...state,\n        chats: action.payload\n      };\n\n    case GET_CHATS_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_GROUPS_SUCCESS:\n      return { ...state,\n        groups: action.payload\n      };\n\n    case GET_GROUPS_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_CONTACTS_SUCCESS:\n      return { ...state,\n        contacts: action.payload\n      };\n\n    case GET_CONTACTS_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_MESSAGES_SUCCESS:\n      return { ...state,\n        messages: action.payload\n      };\n\n    case GET_MESSAGES_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case POST_ADD_MESSAGE_SUCCESS:\n      return { ...state,\n        messages: [...state.messages, action.payload]\n      };\n\n    case POST_ADD_MESSAGE_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["GET_GROUPS_SUCCESS","GET_CHATS_SUCCESS","GET_GROUPS_FAIL","GET_CHATS_FAIL","GET_CONTACTS_SUCCESS","GET_CONTACTS_FAIL","GET_MESSAGES_SUCCESS","GET_MESSAGES_FAIL","POST_ADD_MESSAGE_SUCCESS","POST_ADD_MESSAGE_FAIL","INIT_STATE","chats","groups","contacts","messages","error","Calendar","state","action","type","payload"],"sources":["D:/diom working project/staging/src/store/chat/reducer.js"],"sourcesContent":["import {\r\n  GET_GROUPS_SUCCESS,\r\n  GET_CHATS_SUCCESS,\r\n  GET_GROUPS_FAIL,\r\n  GET_CHATS_FAIL,\r\n  GET_CONTACTS_SUCCESS,\r\n  GET_CONTACTS_FAIL,\r\n  GET_MESSAGES_SUCCESS,\r\n  GET_MESSAGES_FAIL,\r\n  POST_ADD_MESSAGE_SUCCESS,\r\n  POST_ADD_MESSAGE_FAIL,\r\n} from \"./actionTypes\"\r\n\r\nconst INIT_STATE = {\r\n  chats: [],\r\n  groups: [],\r\n  contacts: [],\r\n  messages: [],\r\n  error: {},\r\n}\r\n\r\nconst Calendar = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case GET_CHATS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        chats: action.payload,\r\n      }\r\n\r\n    case GET_CHATS_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      }\r\n\r\n    case GET_GROUPS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        groups: action.payload,\r\n      }\r\n\r\n    case GET_GROUPS_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      }\r\n\r\n    case GET_CONTACTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        contacts: action.payload,\r\n      }\r\n\r\n    case GET_CONTACTS_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      }\r\n\r\n    case GET_MESSAGES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        messages: action.payload,\r\n      }\r\n\r\n    case GET_MESSAGES_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      }\r\n\r\n    case POST_ADD_MESSAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, action.payload],\r\n      }\r\n\r\n    case POST_ADD_MESSAGE_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default Calendar\r\n"],"mappings":"AAAA,SACEA,kBADF,EAEEC,iBAFF,EAGEC,eAHF,EAIEC,cAJF,EAKEC,oBALF,EAMEC,iBANF,EAOEC,oBAPF,EAQEC,iBARF,EASEC,wBATF,EAUEC,qBAVF,QAWO,eAXP;AAaA,MAAMC,UAAU,GAAG;EACjBC,KAAK,EAAE,EADU;EAEjBC,MAAM,EAAE,EAFS;EAGjBC,QAAQ,EAAE,EAHO;EAIjBC,QAAQ,EAAE,EAJO;EAKjBC,KAAK,EAAE;AALU,CAAnB;;AAQA,MAAMC,QAAQ,GAAG,YAAgC;EAAA,IAA/BC,KAA+B,uEAAvBP,UAAuB;EAAA,IAAXQ,MAAW;;EAC/C,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKlB,iBAAL;MACE,OAAO,EACL,GAAGgB,KADE;QAELN,KAAK,EAAEO,MAAM,CAACE;MAFT,CAAP;;IAKF,KAAKjB,cAAL;MACE,OAAO,EACL,GAAGc,KADE;QAELF,KAAK,EAAEG,MAAM,CAACE;MAFT,CAAP;;IAKF,KAAKpB,kBAAL;MACE,OAAO,EACL,GAAGiB,KADE;QAELL,MAAM,EAAEM,MAAM,CAACE;MAFV,CAAP;;IAKF,KAAKlB,eAAL;MACE,OAAO,EACL,GAAGe,KADE;QAELF,KAAK,EAAEG,MAAM,CAACE;MAFT,CAAP;;IAKF,KAAKhB,oBAAL;MACE,OAAO,EACL,GAAGa,KADE;QAELJ,QAAQ,EAAEK,MAAM,CAACE;MAFZ,CAAP;;IAKF,KAAKf,iBAAL;MACE,OAAO,EACL,GAAGY,KADE;QAELF,KAAK,EAAEG,MAAM,CAACE;MAFT,CAAP;;IAKF,KAAKd,oBAAL;MACE,OAAO,EACL,GAAGW,KADE;QAELH,QAAQ,EAAEI,MAAM,CAACE;MAFZ,CAAP;;IAKF,KAAKb,iBAAL;MACE,OAAO,EACL,GAAGU,KADE;QAELF,KAAK,EAAEG,MAAM,CAACE;MAFT,CAAP;;IAKF,KAAKZ,wBAAL;MACE,OAAO,EACL,GAAGS,KADE;QAELH,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAoBI,MAAM,CAACE,OAA3B;MAFL,CAAP;;IAKF,KAAKX,qBAAL;MACE,OAAO,EACL,GAAGQ,KADE;QAELF,KAAK,EAAEG,MAAM,CAACE;MAFT,CAAP;;IAKF;MACE,OAAOH,KAAP;EA9DJ;AAgED,CAjED;;KAAMD,Q;AAmEN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}