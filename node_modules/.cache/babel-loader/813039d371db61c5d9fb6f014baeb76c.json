{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\n/**\r\n *\r\n * @param {query key} key\r\n * @param { async callback function which return data from server} getData\r\n * @returns a response of paginated  api\r\n */\n\nexport function usePaginatedQuery(key, getData) {\n  _s();\n\n  const fallback = {\n    data: [],\n    hasNextPage: false,\n    hasPreviousPage: false,\n    total: 0\n  };\n  const {\n    data = fallback,\n    isLoading = true\n  } = useQuery(key, getData, {\n    keepPreviousData: true,\n    staleTime: 2000,\n    retry: false\n  });\n  return {\n    data,\n    isLoading\n  };\n}\n/**\r\n *\r\n * @param {query key} key\r\n * @param { async callback function which return data from server} getData\r\n * @returns a list of records\r\n */\n\n_s(usePaginatedQuery, \"tneHR8bAP3V/LvWY2rmSm7Ah5PQ=\", false, function () {\n  return [useQuery];\n});\n\nexport function useAllDataQuery(key, getData) {\n  _s2();\n\n  const {\n    data = [],\n    isLoading = true\n  } = useQuery(key, getData, {\n    keepPreviousData: true,\n    staleTime: 2000,\n    retry: false\n  });\n  return {\n    data,\n    isLoading\n  };\n}\n\n_s2(useAllDataQuery, \"7AIKsqQtHL5Y8bn46HftRu9F7c8=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["D:/diom working project/staging/src/hooks/query.js"],"names":["useQuery","usePaginatedQuery","key","getData","fallback","data","hasNextPage","hasPreviousPage","total","isLoading","keepPreviousData","staleTime","retry","useAllDataQuery"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,OAAhC,EAAyC;AAAA;;AAC9C,QAAMC,QAAQ,GAAG;AACfC,IAAAA,IAAI,EAAE,EADS;AAEfC,IAAAA,WAAW,EAAE,KAFE;AAGfC,IAAAA,eAAe,EAAE,KAHF;AAIfC,IAAAA,KAAK,EAAE;AAJQ,GAAjB;AAMA,QAAM;AAAEH,IAAAA,IAAI,GAAGD,QAAT;AAAmBK,IAAAA,SAAS,GAAG;AAA/B,MAAwCT,QAAQ,CAACE,GAAD,EAAMC,OAAN,EAAe;AACnEO,IAAAA,gBAAgB,EAAE,IADiD;AAEnEC,IAAAA,SAAS,EAAE,IAFwD;AAGnEC,IAAAA,KAAK,EAAE;AAH4D,GAAf,CAAtD;AAKA,SAAO;AAAEP,IAAAA,IAAF;AAAQI,IAAAA;AAAR,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;GApBgBR,iB;UAOgCD,Q;;;AAchD,OAAO,SAASa,eAAT,CAAyBX,GAAzB,EAA8BC,OAA9B,EAAuC;AAAA;;AAC5C,QAAM;AAAEE,IAAAA,IAAI,GAAG,EAAT;AAAaI,IAAAA,SAAS,GAAG;AAAzB,MAAkCT,QAAQ,CAACE,GAAD,EAAMC,OAAN,EAAe;AAC7DO,IAAAA,gBAAgB,EAAE,IAD2C;AAE7DC,IAAAA,SAAS,EAAE,IAFkD;AAG7DC,IAAAA,KAAK,EAAE;AAHsD,GAAf,CAAhD;AAKA,SAAO;AAAEP,IAAAA,IAAF;AAAQI,IAAAA;AAAR,GAAP;AACD;;IAPeI,e;UAC0Bb,Q","sourcesContent":["import { useQuery } from \"react-query\";\r\n\r\n/**\r\n *\r\n * @param {query key} key\r\n * @param { async callback function which return data from server} getData\r\n * @returns a response of paginated  api\r\n */\r\nexport function usePaginatedQuery(key, getData) {\r\n  const fallback = {\r\n    data: [],\r\n    hasNextPage: false,\r\n    hasPreviousPage: false,\r\n    total: 0,\r\n  };\r\n  const { data = fallback, isLoading = true } = useQuery(key, getData, {\r\n    keepPreviousData: true,\r\n    staleTime: 2000,\r\n    retry: false,\r\n  });\r\n  return { data, isLoading };\r\n}\r\n\r\n/**\r\n *\r\n * @param {query key} key\r\n * @param { async callback function which return data from server} getData\r\n * @returns a list of records\r\n */\r\nexport function useAllDataQuery(key, getData) {\r\n  const { data = [], isLoading = true } = useQuery(key, getData, {\r\n    keepPreviousData: true,\r\n    staleTime: 2000,\r\n    retry: false,\r\n  });\r\n  return { data, isLoading };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}