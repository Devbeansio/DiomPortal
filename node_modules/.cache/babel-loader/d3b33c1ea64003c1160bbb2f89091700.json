{"ast":null,"code":"import _slicedToArray from\"D:/diom working project/staging/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{useSnackbar}from\"notistack\";import{usePaginatedQuery}from'../../../hooks/query';import{getNewreports,getPastreports}from'../../../APIS/reports';import{QueryClient}from'react-query';import{DIOM_BASED_URLS}from'../../../config/url';import{toast}from\"react-toastify\";var useReportRequest=function useReportRequest(){var _useSnackbar=useSnackbar(),enqueueSnackbar=_useSnackbar.enqueueSnackbar;var token=localStorage.getItem(\"Token\");var _useState=useState(1),_useState2=_slicedToArray(_useState,2),currentPage=_useState2[0],setCurrentPage=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),newOldReportsData=_useState4[0],setNewOldReportsData=_useState4[1];var queryClient=new QueryClient();var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),postFilter=_useState6[0],setPostFilter=_useState6[1];var _useState7=useState(\"USER_REPORTS\"),_useState8=_slicedToArray(_useState7,2),selectedReportType=_useState8[0],setSelectedReportType=_useState8[1];var reportTypeOptions=[{label:\"Booking Report\",value:\"BOOKING_REPORTS\"},{label:\"User Report\",value:\"USER_REPORTS\"},{label:\"User Ananlysis Report\",value:\"USER_ANALYSIS_REPORTS\"},{label:\"Cancelled Bookings\",value:\"CANCELLED_BOOKINGS_REPORTS\"}];var retryFunc=function retryFunc(){// alert(\" i am retry presses\")\nvar message='Gathering Report Data';enqueueSnackbar(message,{variant:'success'});// const message1 = 'Exporting Report ';\n//   enqueueSnackbar(message1, { \n//     variant: 'success', \n// });\n};var downloadFunc=function downloadFunc(rowId){var message1='Your Report has started  to download';enqueueSnackbar(message1,{variant:'success'});////////////\nfetch(\"\".concat(DIOM_BASED_URLS,\"/reports/commands\"),{method:\"POST\",headers:{Accept:\"application/json, text/plain\",\"Content-Type\":\"application/json;charset=UTF-8\",Authorization:\"Bearer \"+token},body:JSON.stringify({\"id\":\"\".concat(rowId),\"command\":\"MARK_READ\"})}).then(function(result3){}).catch(function(error){return toast.error(\" Something went wrong\");});////////////\n};var reportTyperequestFunc=function reportTyperequestFunc(e){setPostFilter(true);setSelectedReportType(e.value);};// *************\nvar _usePaginatedQuery=usePaginatedQuery([\"pastReprtssData\",\"\".concat(selectedReportType)],function(){return getPastreports(token,selectedReportType,postFilter);}),_usePaginatedQuery$da=_usePaginatedQuery.data,pastReportsDataa=_usePaginatedQuery$da.data,hasNextPage=_usePaginatedQuery$da.hasNextPage,hasPreviousPage=_usePaginatedQuery$da.hasPreviousPage,total=_usePaginatedQuery$da.total,pastReportsRefteh=_usePaginatedQuery$da.refetch,isLoading=_usePaginatedQuery.isLoading;// *************\n// *************\nvar _usePaginatedQuery2=usePaginatedQuery([\"newReportssData\",,\"\".concat(selectedReportType)],function(){return getNewreports(token,selectedReportType,postFilter);}),newReportsDataa=_usePaginatedQuery2.data.data;// const newReportsDataa = newReportsData.data;\n// console.log(\"New reports : \",newReportsDataa)\n// *************\n// useEffect(\n//   // FOR PRE-FETCHING NEXT PAGE\n//   async () => {\n//      await getPastreports(token,selectedReportType,postFilter);\n//   },\n//   [selectedReportType]\n// );\nreturn{reportTypeOptions:reportTypeOptions,retryFunc:retryFunc,downloadFunc:downloadFunc,pastReportsDataa:pastReportsDataa,newReportsDataa:newReportsDataa,newOldReportsData:newOldReportsData,setNewOldReportsData:setNewOldReportsData,isLoading:isLoading,reportTyperequestFunc:reportTyperequestFunc};};export default useReportRequest;","map":{"version":3,"sources":["D:/diom working project/staging/src/pages/Reports/generateodf/useReportRequest.js"],"names":["React","useState","useEffect","useSnackbar","usePaginatedQuery","getNewreports","getPastreports","QueryClient","DIOM_BASED_URLS","toast","useReportRequest","enqueueSnackbar","token","localStorage","getItem","currentPage","setCurrentPage","newOldReportsData","setNewOldReportsData","queryClient","postFilter","setPostFilter","selectedReportType","setSelectedReportType","reportTypeOptions","label","value","retryFunc","message","variant","downloadFunc","rowId","message1","fetch","method","headers","Accept","Authorization","body","JSON","stringify","then","result3","catch","error","reportTyperequestFunc","e","data","pastReportsDataa","hasNextPage","hasPreviousPage","total","pastReportsRefteh","refetch","isLoading","newReportsDataa"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport {  useSnackbar } from \"notistack\";\r\nimport { usePaginatedQuery } from '../../../hooks/query';\r\nimport { getNewreports, getPastreports } from '../../../APIS/reports';\r\nimport { QueryClient } from 'react-query';\r\nimport { DIOM_BASED_URLS } from '../../../config/url';\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useReportRequest = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const token = localStorage.getItem(\"Token\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [newOldReportsData,setNewOldReportsData] = useState([])\r\n  const queryClient =new QueryClient();\r\n  const[postFilter,setPostFilter]=useState(false)\r\n  const[selectedReportType,setSelectedReportType]=useState(\"USER_REPORTS\")\r\n    const reportTypeOptions = [\r\n      { label: \"Booking Report\", value: \"BOOKING_REPORTS\" },\r\n      { label: \"User Report\", value: \"USER_REPORTS\" },\r\n      { label: \"User Ananlysis Report\", value: \"USER_ANALYSIS_REPORTS\" },\r\n      { label: \"Cancelled Bookings\", value: \"CANCELLED_BOOKINGS_REPORTS\" },\r\n      ];\r\n\r\n      const retryFunc=()=>{\r\n        // alert(\" i am retry presses\")\r\n        const message = 'Gathering Report Data';\r\n        enqueueSnackbar(message, { \r\n          variant: 'success', \r\n      });\r\n      // const message1 = 'Exporting Report ';\r\n      //   enqueueSnackbar(message1, { \r\n      //     variant: 'success', \r\n      // });\r\n      }\r\n      const downloadFunc=(rowId)=>{\r\n        \r\n        const message1 = 'Your Report has started  to download';\r\n        enqueueSnackbar(message1, { \r\n          variant: 'success', \r\n      });\r\n////////////\r\nfetch(`${DIOM_BASED_URLS}/reports/commands`, {\r\n  method: \"POST\",\r\n  headers: {\r\n    Accept: \"application/json, text/plain\",\r\n    \"Content-Type\": \"application/json;charset=UTF-8\",\r\n    Authorization: \"Bearer \" + token,\r\n  },\r\n  body: JSON.stringify({\r\n    \"id\": `${rowId}`,\r\n    \"command\":\"MARK_READ\"\r\n  }),\r\n})\r\n  .then((result3) => {\r\n   \r\n     \r\n    \r\n  })\r\n  .catch((error) => \r\n  toast.error(\" Something went wrong\"));\r\n\r\n////////////\r\n\r\n\r\n\r\n      }\r\n\r\n      const reportTyperequestFunc = (e)=>{\r\n        setPostFilter(true)\r\n        setSelectedReportType(e.value);\r\n  \r\n      }\r\n\r\n      \r\n  \r\n\r\n\r\n      \r\n// *************\r\n\r\nconst {\r\n  data: { data: pastReportsDataa, hasNextPage, hasPreviousPage, total,refetch:pastReportsRefteh },\r\n  isLoading,\r\n} = usePaginatedQuery(\r\n  [\"pastReprtssData\",`${selectedReportType}`],\r\n  () =>\r\n  getPastreports(token,selectedReportType,postFilter)\r\n\r\n);\r\n\r\n\r\n\r\n// *************\r\n// *************\r\nconst {\r\n  data: { data: newReportsDataa},\r\n  \r\n} = usePaginatedQuery(\r\n  [\"newReportssData\",,`${selectedReportType}`],\r\n  () =>\r\n  getNewreports(token,selectedReportType,postFilter)\r\n);\r\n\r\n// const newReportsDataa = newReportsData.data;\r\n// console.log(\"New reports : \",newReportsDataa)\r\n\r\n// *************\r\n// useEffect(\r\n//   // FOR PRE-FETCHING NEXT PAGE\r\n//   async () => {\r\n//      await getPastreports(token,selectedReportType,postFilter);\r\n    \r\n//   },\r\n//   [selectedReportType]\r\n// );\r\n\r\n\r\n  return (\r\n    {\r\n        reportTypeOptions,\r\n        retryFunc,\r\n        downloadFunc,\r\n        pastReportsDataa,\r\n        newReportsDataa,\r\n        newOldReportsData,setNewOldReportsData,\r\n        isLoading,\r\n        reportTyperequestFunc\r\n    }\r\n  )\r\n}\r\n\r\nexport default useReportRequest"]},"metadata":{},"sourceType":"module"}